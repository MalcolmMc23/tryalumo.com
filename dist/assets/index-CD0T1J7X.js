var Cr = Object.defineProperty; var En = r => { throw TypeError(r) }; var Rr = (r, e, t) => e in r ? Cr(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t; var P = (r, e, t) => Rr(r, typeof e != "symbol" ? e + "" : e, t), vr = (r, e, t) => e.has(r) || En("Cannot " + t); var $n = (r, e, t) => e.has(r) ? En("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(r) : e.set(r, t); var Qe = (r, e, t) => (vr(r, e, "access private method"), t); (function () { const e = document.createElement("link").relList; if (e && e.supports && e.supports("modulepreload")) return; for (const s of document.querySelectorAll('link[rel="modulepreload"]')) n(s); new MutationObserver(s => { for (const i of s) if (i.type === "childList") for (const a of i.addedNodes) a.tagName === "LINK" && a.rel === "modulepreload" && n(a) }).observe(document, { childList: !0, subtree: !0 }); function t(s) { const i = {}; return s.integrity && (i.integrity = s.integrity), s.referrerPolicy && (i.referrerPolicy = s.referrerPolicy), s.crossOrigin === "use-credentials" ? i.credentials = "include" : s.crossOrigin === "anonymous" ? i.credentials = "omit" : i.credentials = "same-origin", i } function n(s) { if (s.ep) return; s.ep = !0; const i = t(s); fetch(s.href, i) } })(); const Mt = "RFC3986", Ft = { RFC1738: r => String(r).replace(/%20/g, "+"), RFC3986: r => String(r) }, Er = "RFC1738", $r = Array.isArray, Y = (() => { const r = []; for (let e = 0; e < 256; ++e)r.push("%" + ((e < 16 ? "0" : "") + e.toString(16)).toUpperCase()); return r })(), St = 1024, Pr = (r, e, t, n, s) => { if (r.length === 0) return r; let i = r; if (typeof r == "symbol" ? i = Symbol.prototype.toString.call(r) : typeof r != "string" && (i = String(r)), t === "iso-8859-1") return escape(i).replace(/%u[0-9a-f]{4}/gi, function (o) { return "%26%23" + parseInt(o.slice(2), 16) + "%3B" }); let a = ""; for (let o = 0; o < i.length; o += St) { const l = i.length >= St ? i.slice(o, o + St) : i, u = []; for (let f = 0; f < l.length; ++f) { let c = l.charCodeAt(f); if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122 || s === Er && (c === 40 || c === 41)) { u[u.length] = l.charAt(f); continue } if (c < 128) { u[u.length] = Y[c]; continue } if (c < 2048) { u[u.length] = Y[192 | c >> 6] + Y[128 | c & 63]; continue } if (c < 55296 || c >= 57344) { u[u.length] = Y[224 | c >> 12] + Y[128 | c >> 6 & 63] + Y[128 | c & 63]; continue } f += 1, c = 65536 + ((c & 1023) << 10 | l.charCodeAt(f) & 1023), u[u.length] = Y[240 | c >> 18] + Y[128 | c >> 12 & 63] + Y[128 | c >> 6 & 63] + Y[128 | c & 63] } a += u.join("") } return a }; function Ir(r) { return !r || typeof r != "object" ? !1 : !!(r.constructor && r.constructor.isBuffer && r.constructor.isBuffer(r)) } function Pn(r, e) { if ($r(r)) { const t = []; for (let n = 0; n < r.length; n += 1)t.push(e(r[n])); return t } return e(r) } const Tr = Object.prototype.hasOwnProperty, ts = { brackets(r) { return String(r) + "[]" }, comma: "comma", indices(r, e) { return String(r) + "[" + e + "]" }, repeat(r) { return String(r) } }, ee = Array.isArray, Or = Array.prototype.push, ns = function (r, e) { Or.apply(r, ee(e) ? e : [e]) }, Mr = Date.prototype.toISOString, L = { addQueryPrefix: !1, allowDots: !1, allowEmptyArrays: !1, arrayFormat: "indices", charset: "utf-8", charsetSentinel: !1, delimiter: "&", encode: !0, encodeDotInKeys: !1, encoder: Pr, encodeValuesOnly: !1, format: Mt, formatter: Ft[Mt], indices: !1, serializeDate(r) { return Mr.call(r) }, skipNulls: !1, strictNullHandling: !1 }; function Fr(r) { return typeof r == "string" || typeof r == "number" || typeof r == "boolean" || typeof r == "symbol" || typeof r == "bigint" } const At = {}; function ss(r, e, t, n, s, i, a, o, l, u, f, c, h, d, w, m, g, M) { let p = r, k = M, _ = 0, I = !1; for (; (k = k.get(At)) !== void 0 && !I;) { const O = k.get(r); if (_ += 1, typeof O < "u") { if (O === _) throw new RangeError("Cyclic object value"); I = !0 } typeof k.get(At) > "u" && (_ = 0) } if (typeof u == "function" ? p = u(e, p) : p instanceof Date ? p = h == null ? void 0 : h(p) : t === "comma" && ee(p) && (p = Pn(p, function (O) { return O instanceof Date ? h == null ? void 0 : h(O) : O })), p === null) { if (i) return l && !m ? l(e, L.encoder, g, "key", d) : e; p = "" } if (Fr(p) || Ir(p)) { if (l) { const O = m ? e : l(e, L.encoder, g, "key", d); return [(w == null ? void 0 : w(O)) + "=" + (w == null ? void 0 : w(l(p, L.encoder, g, "value", d)))] } return [(w == null ? void 0 : w(e)) + "=" + (w == null ? void 0 : w(String(p)))] } const C = []; if (typeof p > "u") return C; let x; if (t === "comma" && ee(p)) m && l && (p = Pn(p, l)), x = [{ value: p.length > 0 ? p.join(",") || null : void 0 }]; else if (ee(u)) x = u; else { const O = Object.keys(p); x = f ? O.sort(f) : O } const X = o ? String(e).replace(/\./g, "%2E") : String(e), F = n && ee(p) && p.length === 1 ? X + "[]" : X; if (s && ee(p) && p.length === 0) return F + "[]"; for (let O = 0; O < x.length; ++O) { const $ = x[O], pe = typeof $ == "object" && typeof $.value < "u" ? $.value : p[$]; if (a && pe === null) continue; const xt = c && o ? $.replace(/\./g, "%2E") : $, Ar = ee(p) ? typeof t == "function" ? t(F, xt) : F : F + (c ? "." + xt : "[" + xt + "]"); M.set(r, _); const vn = new WeakMap; vn.set(At, M), ns(C, ss(pe, Ar, t, n, s, i, a, o, t === "comma" && m && ee(p) ? null : l, u, f, c, h, d, w, m, g, vn)) } return C } function Nr(r = L) { if (typeof r.allowEmptyArrays < "u" && typeof r.allowEmptyArrays != "boolean") throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided"); if (typeof r.encodeDotInKeys < "u" && typeof r.encodeDotInKeys != "boolean") throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided"); if (r.encoder !== null && typeof r.encoder < "u" && typeof r.encoder != "function") throw new TypeError("Encoder has to be a function."); const e = r.charset || L.charset; if (typeof r.charset < "u" && r.charset !== "utf-8" && r.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined"); let t = Mt; if (typeof r.format < "u") { if (!Tr.call(Ft, r.format)) throw new TypeError("Unknown format option provided."); t = r.format } const n = Ft[t]; let s = L.filter; (typeof r.filter == "function" || ee(r.filter)) && (s = r.filter); let i; if (r.arrayFormat && r.arrayFormat in ts ? i = r.arrayFormat : "indices" in r ? i = r.indices ? "indices" : "repeat" : i = L.arrayFormat, "commaRoundTrip" in r && typeof r.commaRoundTrip != "boolean") throw new TypeError("`commaRoundTrip` must be a boolean, or absent"); const a = typeof r.allowDots > "u" ? r.encodeDotInKeys ? !0 : L.allowDots : !!r.allowDots; return { addQueryPrefix: typeof r.addQueryPrefix == "boolean" ? r.addQueryPrefix : L.addQueryPrefix, allowDots: a, allowEmptyArrays: typeof r.allowEmptyArrays == "boolean" ? !!r.allowEmptyArrays : L.allowEmptyArrays, arrayFormat: i, charset: e, charsetSentinel: typeof r.charsetSentinel == "boolean" ? r.charsetSentinel : L.charsetSentinel, commaRoundTrip: !!r.commaRoundTrip, delimiter: typeof r.delimiter > "u" ? L.delimiter : r.delimiter, encode: typeof r.encode == "boolean" ? r.encode : L.encode, encodeDotInKeys: typeof r.encodeDotInKeys == "boolean" ? r.encodeDotInKeys : L.encodeDotInKeys, encoder: typeof r.encoder == "function" ? r.encoder : L.encoder, encodeValuesOnly: typeof r.encodeValuesOnly == "boolean" ? r.encodeValuesOnly : L.encodeValuesOnly, filter: s, format: t, formatter: n, serializeDate: typeof r.serializeDate == "function" ? r.serializeDate : L.serializeDate, skipNulls: typeof r.skipNulls == "boolean" ? r.skipNulls : L.skipNulls, sort: typeof r.sort == "function" ? r.sort : null, strictNullHandling: typeof r.strictNullHandling == "boolean" ? r.strictNullHandling : L.strictNullHandling } } function Lr(r, e = {}) { let t = r; const n = Nr(e); let s, i; typeof n.filter == "function" ? (i = n.filter, t = i("", t)) : ee(n.filter) && (i = n.filter, s = i); const a = []; if (typeof t != "object" || t === null) return ""; const o = ts[n.arrayFormat], l = o === "comma" && n.commaRoundTrip; s || (s = Object.keys(t)), n.sort && s.sort(n.sort); const u = new WeakMap; for (let h = 0; h < s.length; ++h) { const d = s[h]; n.skipNulls && t[d] === null || ns(a, ss(t[d], d, o, l, n.allowEmptyArrays, n.strictNullHandling, n.skipNulls, n.encodeDotInKeys, n.encode ? n.encoder : null, n.filter, n.sort, n.allowDots, n.serializeDate, n.format, n.formatter, n.encodeValuesOnly, n.charset, u)) } const f = a.join(n.delimiter); let c = n.addQueryPrefix === !0 ? "?" : ""; return n.charsetSentinel && (n.charset === "iso-8859-1" ? c += "utf8=%26%2310003%3B&" : c += "utf8=%E2%9C%93&"), f.length > 0 ? c + f : "" } const we = "4.79.1"; let In = !1, Ne, rs, is, Nt, as, os, ls, cs, us; function Br(r, e = { auto: !1 }) { if (In) throw new Error(`you must \`import 'openai/shims/${r.kind}'\` before importing anything else from openai`); if (Ne) throw new Error(`can't \`import 'openai/shims/${r.kind}'\` after \`import 'openai/shims/${Ne}'\``); In = e.auto, Ne = r.kind, rs = r.fetch, is = r.FormData, Nt = r.File, as = r.ReadableStream, os = r.getMultipartRequestOptions, ls = r.getDefaultAgent, cs = r.fileFromPath, us = r.isFsReadStream } class Dr { constructor(e) { this.body = e } get [Symbol.toStringTag]() { return "MultipartBody" } } function zr({ manuallyImported: r } = {}) { const e = r ? "You may need to use polyfills" : "Add one of these imports before your first `import â€¦ from 'openai'`:\n- `import 'openai/shims/node'` (if you're running on Node)\n- `import 'openai/shims/web'` (otherwise)\n"; let t, n, s, i; try { t = fetch, n = Request, s = Response, i = Headers } catch (a) { throw new Error(`this environment is missing the following Web Fetch API type: ${a.message}. ${e}`) } return { kind: "web", fetch: t, Request: n, Response: s, Headers: i, FormData: typeof FormData < "u" ? FormData : class { constructor() { throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${e}`) } }, Blob: typeof Blob < "u" ? Blob : class { constructor() { throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${e}`) } }, File: typeof File < "u" ? File : class { constructor() { throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${e}`) } }, ReadableStream: typeof ReadableStream < "u" ? ReadableStream : class { constructor() { throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${e}`) } }, getMultipartRequestOptions: async (a, o) => ({ ...o, body: new Dr(a) }), getDefaultAgent: a => { }, fileFromPath: () => { throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads") }, isFsReadStream: a => !1 } } Ne || Br(zr(), { auto: !0 }); class b extends Error { } class z extends b { constructor(e, t, n, s) { super(`${z.makeMessage(e, t, n)}`), this.status = e, this.headers = s, this.request_id = s == null ? void 0 : s["x-request-id"], this.error = t; const i = t; this.code = i == null ? void 0 : i.code, this.param = i == null ? void 0 : i.param, this.type = i == null ? void 0 : i.type } static makeMessage(e, t, n) { const s = t != null && t.message ? typeof t.message == "string" ? t.message : JSON.stringify(t.message) : t ? JSON.stringify(t) : n; return e && s ? `${e} ${s}` : e ? `${e} status code (no body)` : s || "(no status code or body)" } static generate(e, t, n, s) { if (!e || !s) return new yt({ message: n, cause: Bt(t) }); const i = t == null ? void 0 : t.error; return e === 400 ? new hs(e, i, n, s) : e === 401 ? new fs(e, i, n, s) : e === 403 ? new ds(e, i, n, s) : e === 404 ? new ms(e, i, n, s) : e === 409 ? new ps(e, i, n, s) : e === 422 ? new gs(e, i, n, s) : e === 429 ? new ys(e, i, n, s) : e >= 500 ? new ws(e, i, n, s) : new z(e, i, n, s) } } class G extends z { constructor({ message: e } = {}) { super(void 0, void 0, e || "Request was aborted.", void 0) } } class yt extends z { constructor({ message: e, cause: t }) { super(void 0, void 0, e || "Connection error.", void 0), t && (this.cause = t) } } class Qt extends yt { constructor({ message: e } = {}) { super({ message: e ?? "Request timed out." }) } } class hs extends z { } class fs extends z { } class ds extends z { } class ms extends z { } class ps extends z { } class gs extends z { } class ys extends z { } class ws extends z { } class _s extends b { constructor() { super("Could not parse response content as the length limit was reached") } } class bs extends b { constructor() { super("Could not parse response content as the request was rejected by the content filter") } } class he { constructor() { this.buffer = [], this.trailingCR = !1 } decode(e) { let t = this.decodeText(e); if (this.trailingCR && (t = "\r" + t, this.trailingCR = !1), t.endsWith("\r") && (this.trailingCR = !0, t = t.slice(0, -1)), !t) return []; const n = he.NEWLINE_CHARS.has(t[t.length - 1] || ""); let s = t.split(he.NEWLINE_REGEXP); return n && s.pop(), s.length === 1 && !n ? (this.buffer.push(s[0]), []) : (this.buffer.length > 0 && (s = [this.buffer.join("") + s[0], ...s.slice(1)], this.buffer = []), n || (this.buffer = [s.pop() || ""]), s) } decodeText(e) { if (e == null) return ""; if (typeof e == "string") return e; if (typeof Buffer < "u") { if (e instanceof Buffer) return e.toString(); if (e instanceof Uint8Array) return Buffer.from(e).toString(); throw new b(`Unexpected: received non-Uint8Array (${e.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`) } if (typeof TextDecoder < "u") { if (e instanceof Uint8Array || e instanceof ArrayBuffer) return this.textDecoder ?? (this.textDecoder = new TextDecoder("utf8")), this.textDecoder.decode(e); throw new b(`Unexpected: received non-Uint8Array/ArrayBuffer (${e.constructor.name}) in a web platform. Please report this error.`) } throw new b("Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.") } flush() { if (!this.buffer.length && !this.trailingCR) return []; const e = [this.buffer.join("")]; return this.buffer = [], this.trailingCR = !1, e } } he.NEWLINE_CHARS = new Set([`
`, "\r"]); he.NEWLINE_REGEXP = /\r\n|[\n\r]/g; class ne {
  constructor(e, t) { this.iterator = e, this.controller = t } static fromSSEResponse(e, t) { let n = !1; async function* s() { if (n) throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream."); n = !0; let i = !1; try { for await (const a of Ur(e, t)) if (!i) { if (a.data.startsWith("[DONE]")) { i = !0; continue } if (a.event === null) { let o; try { o = JSON.parse(a.data) } catch (l) { throw console.error("Could not parse message into JSON:", a.data), console.error("From chunk:", a.raw), l } if (o && o.error) throw new z(void 0, o.error, void 0, void 0); yield o } else { let o; try { o = JSON.parse(a.data) } catch (l) { throw console.error("Could not parse message into JSON:", a.data), console.error("From chunk:", a.raw), l } if (a.event == "error") throw new z(void 0, o.error, o.message, void 0); yield { event: a.event, data: o } } } i = !0 } catch (a) { if (a instanceof Error && a.name === "AbortError") return; throw a } finally { i || t.abort() } } return new ne(s, t) } static fromReadableStream(e, t) { let n = !1; async function* s() { const a = new he, o = ks(e); for await (const l of o) for (const u of a.decode(l)) yield u; for (const l of a.flush()) yield l } async function* i() { if (n) throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream."); n = !0; let a = !1; try { for await (const o of s()) a || o && (yield JSON.parse(o)); a = !0 } catch (o) { if (o instanceof Error && o.name === "AbortError") return; throw o } finally { a || t.abort() } } return new ne(i, t) } [Symbol.asyncIterator]() { return this.iterator() } tee() { const e = [], t = [], n = this.iterator(), s = i => ({ next: () => { if (i.length === 0) { const a = n.next(); e.push(a), t.push(a) } return i.shift() } }); return [new ne(() => s(e), this.controller), new ne(() => s(t), this.controller)] } toReadableStream() {
    const e = this; let t; const n = new TextEncoder; return new as({
      async start() { t = e[Symbol.asyncIterator]() }, async pull(s) {
        try {
          const { value: i, done: a } = await t.next(); if (a) return s.close(); const o = n.encode(JSON.stringify(i) + `
`); s.enqueue(o)
        } catch (i) { s.error(i) }
      }, async cancel() { var s; await ((s = t.return) == null ? void 0 : s.call(t)) }
    })
  }
} async function* Ur(r, e) { if (!r.body) throw e.abort(), new b("Attempted to iterate over a response with no body"); const t = new jr, n = new he, s = ks(r.body); for await (const i of qr(s)) for (const a of n.decode(i)) { const o = t.decode(a); o && (yield o) } for (const i of n.flush()) { const a = t.decode(i); a && (yield a) } } async function* qr(r) { let e = new Uint8Array; for await (const t of r) { if (t == null) continue; const n = t instanceof ArrayBuffer ? new Uint8Array(t) : typeof t == "string" ? new TextEncoder().encode(t) : t; let s = new Uint8Array(e.length + n.length); s.set(e), s.set(n, e.length), e = s; let i; for (; (i = Wr(e)) !== -1;)yield e.slice(0, i), e = e.slice(i) } e.length > 0 && (yield e) } function Wr(r) { for (let n = 0; n < r.length - 2; n++) { if (r[n] === 10 && r[n + 1] === 10 || r[n] === 13 && r[n + 1] === 13) return n + 2; if (r[n] === 13 && r[n + 1] === 10 && n + 3 < r.length && r[n + 2] === 13 && r[n + 3] === 10) return n + 4 } return -1 } class jr {
  constructor() { this.event = null, this.data = [], this.chunks = [] } decode(e) {
    if (e.endsWith("\r") && (e = e.substring(0, e.length - 1)), !e) {
      if (!this.event && !this.data.length) return null; const i = {
        event: this.event, data: this.data.join(`
`), raw: this.chunks
      }; return this.event = null, this.data = [], this.chunks = [], i
    } if (this.chunks.push(e), e.startsWith(":")) return null; let [t, n, s] = Hr(e, ":"); return s.startsWith(" ") && (s = s.substring(1)), t === "event" ? this.event = s : t === "data" && this.data.push(s), null
  }
} function Hr(r, e) { const t = r.indexOf(e); return t !== -1 ? [r.substring(0, t), e, r.substring(t + e.length)] : [r, "", ""] } function ks(r) { if (r[Symbol.asyncIterator]) return r; const e = r.getReader(); return { async next() { try { const t = await e.read(); return t != null && t.done && e.releaseLock(), t } catch (t) { throw e.releaseLock(), t } }, async return() { const t = e.cancel(); return e.releaseLock(), await t, { done: !0, value: void 0 } }, [Symbol.asyncIterator]() { return this } } } const xs = r => r != null && typeof r == "object" && typeof r.url == "string" && typeof r.blob == "function", Ss = r => r != null && typeof r == "object" && typeof r.name == "string" && typeof r.lastModified == "number" && wt(r), wt = r => r != null && typeof r == "object" && typeof r.size == "number" && typeof r.type == "string" && typeof r.text == "function" && typeof r.slice == "function" && typeof r.arrayBuffer == "function", Jr = r => Ss(r) || xs(r) || us(r); async function As(r, e, t) { var s; if (r = await r, Ss(r)) return r; if (xs(r)) { const i = await r.blob(); e || (e = new URL(r.url).pathname.split(/[\\/]/).pop() ?? "unknown_file"); const a = wt(i) ? [await i.arrayBuffer()] : [i]; return new Nt(a, e, t) } const n = await Xr(r); if (e || (e = Qr(r) ?? "unknown_file"), !(t != null && t.type)) { const i = (s = n[0]) == null ? void 0 : s.type; typeof i == "string" && (t = { ...t, type: i }) } return new Nt(n, e, t) } async function Xr(r) { var t; let e = []; if (typeof r == "string" || ArrayBuffer.isView(r) || r instanceof ArrayBuffer) e.push(r); else if (wt(r)) e.push(await r.arrayBuffer()); else if (Gr(r)) for await (const n of r) e.push(n); else throw new Error(`Unexpected data type: ${typeof r}; constructor: ${(t = r == null ? void 0 : r.constructor) == null ? void 0 : t.name}; props: ${Vr(r)}`); return e } function Vr(r) { return `[${Object.getOwnPropertyNames(r).map(t => `"${t}"`).join(", ")}]` } function Qr(r) { var e; return Ct(r.name) || Ct(r.filename) || ((e = Ct(r.path)) == null ? void 0 : e.split(/[\\/]/).pop()) } const Ct = r => { if (typeof r == "string") return r; if (typeof Buffer < "u" && r instanceof Buffer) return String(r) }, Gr = r => r != null && typeof r == "object" && typeof r[Symbol.asyncIterator] == "function", Tn = r => r && typeof r == "object" && r.body && r[Symbol.toStringTag] === "MultipartBody", Ce = async r => { const e = await Kr(r.body); return os(e, r) }, Kr = async r => { const e = new is; return await Promise.all(Object.entries(r || {}).map(([t, n]) => Lt(e, t, n))), e }, Lt = async (r, e, t) => { if (t !== void 0) { if (t == null) throw new TypeError(`Received null for "${e}"; to pass null in FormData, you must use the string 'null'`); if (typeof t == "string" || typeof t == "number" || typeof t == "boolean") r.append(e, String(t)); else if (Jr(t)) { const n = await As(t); r.append(e, n) } else if (Array.isArray(t)) await Promise.all(t.map(n => Lt(r, e + "[]", n))); else if (typeof t == "object") await Promise.all(Object.entries(t).map(([n, s]) => Lt(r, `${e}[${n}]`, s))); else throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${t} instead`) } }; var ke = {}, Zr = function (r, e, t, n, s) { if (typeof e == "function" ? r !== e || !0 : !e.has(r)) throw new TypeError("Cannot write private member to an object whose class did not declare it"); return e.set(r, t), t }, Yr = function (r, e, t, n) { if (t === "a" && !n) throw new TypeError("Private accessor was defined without a getter"); if (typeof e == "function" ? r !== e || !n : !e.has(r)) throw new TypeError("Cannot read private member from an object whose class did not declare it"); return t === "m" ? n : t === "a" ? n.call(r) : n ? n.value : e.get(r) }, Ge; async function Cs(r) { const { response: e } = r; if (r.options.stream) return xe("response", e.status, e.url, e.headers, e.body), r.options.__streamClass ? r.options.__streamClass.fromSSEResponse(e, r.controller) : ne.fromSSEResponse(e, r.controller); if (e.status === 204) return null; if (r.options.__binaryResponse) return e; const t = e.headers.get("content-type"); if ((t == null ? void 0 : t.includes("application/json")) || (t == null ? void 0 : t.includes("application/vnd.api+json"))) { const i = await e.json(); return xe("response", e.status, e.url, e.headers, i), Rs(i, e) } const s = await e.text(); return xe("response", e.status, e.url, e.headers, s), s } function Rs(r, e) { return !r || typeof r != "object" || Array.isArray(r) ? r : Object.defineProperty(r, "_request_id", { value: e.headers.get("x-request-id"), enumerable: !1 }) } class _t extends Promise { constructor(e, t = Cs) { super(n => { n(null) }), this.responsePromise = e, this.parseResponse = t } _thenUnwrap(e) { return new _t(this.responsePromise, async t => Rs(e(await this.parseResponse(t), t), t.response)) } asResponse() { return this.responsePromise.then(e => e.response) } async withResponse() { const [e, t] = await Promise.all([this.parse(), this.asResponse()]); return { data: e, response: t, request_id: t.headers.get("x-request-id") } } parse() { return this.parsedPromise || (this.parsedPromise = this.responsePromise.then(this.parseResponse)), this.parsedPromise } then(e, t) { return this.parse().then(e, t) } catch(e) { return this.parse().catch(e) } finally(e) { return this.parse().finally(e) } } class ei { constructor({ baseURL: e, maxRetries: t = 2, timeout: n = 6e5, httpAgent: s, fetch: i }) { this.baseURL = e, this.maxRetries = Rt("maxRetries", t), this.timeout = Rt("timeout", n), this.httpAgent = s, this.fetch = i ?? rs } authHeaders(e) { return {} } defaultHeaders(e) { return { Accept: "application/json", "Content-Type": "application/json", "User-Agent": this.getUserAgent(), ...ai(), ...this.authHeaders(e) } } validateHeaders(e, t) { } defaultIdempotencyKey() { return `stainless-node-retry-${ui()}` } get(e, t) { return this.methodRequest("get", e, t) } post(e, t) { return this.methodRequest("post", e, t) } patch(e, t) { return this.methodRequest("patch", e, t) } put(e, t) { return this.methodRequest("put", e, t) } delete(e, t) { return this.methodRequest("delete", e, t) } methodRequest(e, t, n) { return this.request(Promise.resolve(n).then(async s => { const i = s && wt(s == null ? void 0 : s.body) ? new DataView(await s.body.arrayBuffer()) : (s == null ? void 0 : s.body) instanceof DataView ? s.body : (s == null ? void 0 : s.body) instanceof ArrayBuffer ? new DataView(s.body) : s && ArrayBuffer.isView(s == null ? void 0 : s.body) ? new DataView(s.body.buffer) : s == null ? void 0 : s.body; return { method: e, path: t, ...s, body: i } })) } getAPIList(e, t, n) { return this.requestAPIList(t, { method: "get", path: e, ...n }) } calculateContentLength(e) { if (typeof e == "string") { if (typeof Buffer < "u") return Buffer.byteLength(e, "utf8").toString(); if (typeof TextEncoder < "u") return new TextEncoder().encode(e).length.toString() } else if (ArrayBuffer.isView(e)) return e.byteLength.toString(); return null } buildRequest(e, { retryCount: t = 0 } = {}) { var m; const { method: n, path: s, query: i, headers: a = {} } = e, o = ArrayBuffer.isView(e.body) || e.__binaryRequest && typeof e.body == "string" ? e.body : Tn(e.body) ? e.body.body : e.body ? JSON.stringify(e.body, null, 2) : null, l = this.calculateContentLength(o), u = this.buildURL(s, i); "timeout" in e && Rt("timeout", e.timeout); const f = e.timeout ?? this.timeout, c = e.httpAgent ?? this.httpAgent ?? ls(u), h = f + 1e3; typeof ((m = c == null ? void 0 : c.options) == null ? void 0 : m.timeout) == "number" && h > (c.options.timeout ?? 0) && (c.options.timeout = h), this.idempotencyHeader && n !== "get" && (e.idempotencyKey || (e.idempotencyKey = this.defaultIdempotencyKey()), a[this.idempotencyHeader] = e.idempotencyKey); const d = this.buildHeaders({ options: e, headers: a, contentLength: l, retryCount: t }); return { req: { method: n, ...o && { body: o }, headers: d, ...c && { agent: c }, signal: e.signal ?? null }, url: u, timeout: f } } buildHeaders({ options: e, headers: t, contentLength: n, retryCount: s }) { const i = {}; n && (i["content-length"] = n); const a = this.defaultHeaders(e); return Nn(i, a), Nn(i, t), Tn(e.body) && Ne !== "node" && delete i["content-type"], Bn(a, "x-stainless-retry-count") === void 0 && Bn(t, "x-stainless-retry-count") === void 0 && (i["x-stainless-retry-count"] = String(s)), this.validateHeaders(i, t), i } async prepareOptions(e) { } async prepareRequest(e, { url: t, options: n }) { } parseHeaders(e) { return e ? Symbol.iterator in e ? Object.fromEntries(Array.from(e).map(t => [...t])) : { ...e } : {} } makeStatusError(e, t, n, s) { return z.generate(e, t, n, s) } request(e, t = null) { return new _t(this.makeRequest(e, t)) } async makeRequest(e, t) { var c, h; const n = await e, s = n.maxRetries ?? this.maxRetries; t == null && (t = s), await this.prepareOptions(n); const { req: i, url: a, timeout: o } = this.buildRequest(n, { retryCount: s - t }); if (await this.prepareRequest(i, { url: a, options: n }), xe("request", a, n, i.headers), (c = n.signal) != null && c.aborted) throw new G; const l = new AbortController, u = await this.fetchWithTimeout(a, i, o, l).catch(Bt); if (u instanceof Error) { if ((h = n.signal) != null && h.aborted) throw new G; if (t) return this.retryRequest(n, t); throw u.name === "AbortError" ? new Qt : new yt({ cause: u }) } const f = ni(u.headers); if (!u.ok) { if (t && this.shouldRetry(u)) { const p = `retrying, ${t} attempts remaining`; return xe(`response (error; ${p})`, u.status, a, f), this.retryRequest(n, t, f) } const d = await u.text().catch(p => Bt(p).message), w = oi(d), m = w ? void 0 : d; throw xe(`response (error; ${t ? "(error; no more retries left)" : "(error; not retryable)"})`, u.status, a, f, m), this.makeStatusError(u.status, w, m, f) } return { response: u, options: n, controller: l } } requestAPIList(e, t) { const n = this.makeRequest(t, null); return new ti(this, n, e) } buildURL(e, t) { const n = ci(e) ? new URL(e) : new URL(this.baseURL + (this.baseURL.endsWith("/") && e.startsWith("/") ? e.slice(1) : e)), s = this.defaultQuery(); return Es(s) || (t = { ...s, ...t }), typeof t == "object" && t && !Array.isArray(t) && (n.search = this.stringifyQuery(t)), n.toString() } stringifyQuery(e) { return Object.entries(e).filter(([t, n]) => typeof n < "u").map(([t, n]) => { if (typeof n == "string" || typeof n == "number" || typeof n == "boolean") return `${encodeURIComponent(t)}=${encodeURIComponent(n)}`; if (n === null) return `${encodeURIComponent(t)}=`; throw new b(`Cannot stringify type ${typeof n}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`) }).join("&") } async fetchWithTimeout(e, t, n, s) { const { signal: i, ...a } = t || {}; i && i.addEventListener("abort", () => s.abort()); const o = setTimeout(() => s.abort(), n), l = { signal: s.signal, ...a }; return l.method && (l.method = l.method.toUpperCase()), this.fetch.call(void 0, e, l).finally(() => { clearTimeout(o) }) } shouldRetry(e) { const t = e.headers.get("x-should-retry"); return t === "true" ? !0 : t === "false" ? !1 : e.status === 408 || e.status === 409 || e.status === 429 || e.status >= 500 } async retryRequest(e, t, n) { let s; const i = n == null ? void 0 : n["retry-after-ms"]; if (i) { const o = parseFloat(i); Number.isNaN(o) || (s = o) } const a = n == null ? void 0 : n["retry-after"]; if (a && !s) { const o = parseFloat(a); Number.isNaN(o) ? s = Date.parse(a) - Date.now() : s = o * 1e3 } if (!(s && 0 <= s && s < 60 * 1e3)) { const o = e.maxRetries ?? this.maxRetries; s = this.calculateDefaultRetryTimeoutMillis(t, o) } return await qe(s), this.makeRequest(e, t - 1) } calculateDefaultRetryTimeoutMillis(e, t) { const i = t - e, a = Math.min(.5 * Math.pow(2, i), 8), o = 1 - Math.random() * .25; return a * o * 1e3 } getUserAgent() { return `${this.constructor.name}/JS ${we}` } } class vs { constructor(e, t, n, s) { Ge.set(this, void 0), Zr(this, Ge, e), this.options = s, this.response = t, this.body = n } hasNextPage() { return this.getPaginatedItems().length ? this.nextPageInfo() != null : !1 } async getNextPage() { const e = this.nextPageInfo(); if (!e) throw new b("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`."); const t = { ...this.options }; if ("params" in e && typeof t.query == "object") t.query = { ...t.query, ...e.params }; else if ("url" in e) { const n = [...Object.entries(t.query || {}), ...e.url.searchParams.entries()]; for (const [s, i] of n) e.url.searchParams.set(s, i); t.query = void 0, t.path = e.url.toString() } return await Yr(this, Ge, "f").requestAPIList(this.constructor, t) } async*iterPages() { let e = this; for (yield e; e.hasNextPage();)e = await e.getNextPage(), yield e } async*[(Ge = new WeakMap, Symbol.asyncIterator)]() { for await (const e of this.iterPages()) for (const t of e.getPaginatedItems()) yield t } } class ti extends _t { constructor(e, t, n) { super(t, async s => new n(e, s.response, await Cs(s), s.options)) } async*[Symbol.asyncIterator]() { const e = await this; for await (const t of e) yield t } } const ni = r => new Proxy(Object.fromEntries(r.entries()), { get(e, t) { const n = t.toString(); return e[n.toLowerCase()] || e[n] } }), si = { method: !0, path: !0, query: !0, body: !0, headers: !0, maxRetries: !0, stream: !0, timeout: !0, httpAgent: !0, signal: !0, idempotencyKey: !0, __binaryRequest: !0, __binaryResponse: !0, __streamClass: !0 }, W = r => typeof r == "object" && r !== null && !Es(r) && Object.keys(r).every(e => $s(si, e)), ri = () => { var e; if (typeof Deno < "u" && Deno.build != null) return { "X-Stainless-Lang": "js", "X-Stainless-Package-Version": we, "X-Stainless-OS": Mn(Deno.build.os), "X-Stainless-Arch": On(Deno.build.arch), "X-Stainless-Runtime": "deno", "X-Stainless-Runtime-Version": typeof Deno.version == "string" ? Deno.version : ((e = Deno.version) == null ? void 0 : e.deno) ?? "unknown" }; if (typeof EdgeRuntime < "u") return { "X-Stainless-Lang": "js", "X-Stainless-Package-Version": we, "X-Stainless-OS": "Unknown", "X-Stainless-Arch": `other:${EdgeRuntime}`, "X-Stainless-Runtime": "edge", "X-Stainless-Runtime-Version": process.version }; if (Object.prototype.toString.call(typeof process < "u" ? process : 0) === "[object process]") return { "X-Stainless-Lang": "js", "X-Stainless-Package-Version": we, "X-Stainless-OS": Mn(process.platform), "X-Stainless-Arch": On(process.arch), "X-Stainless-Runtime": "node", "X-Stainless-Runtime-Version": process.version }; const r = ii(); return r ? { "X-Stainless-Lang": "js", "X-Stainless-Package-Version": we, "X-Stainless-OS": "Unknown", "X-Stainless-Arch": "unknown", "X-Stainless-Runtime": `browser:${r.browser}`, "X-Stainless-Runtime-Version": r.version } : { "X-Stainless-Lang": "js", "X-Stainless-Package-Version": we, "X-Stainless-OS": "Unknown", "X-Stainless-Arch": "unknown", "X-Stainless-Runtime": "unknown", "X-Stainless-Runtime-Version": "unknown" } }; function ii() { if (typeof navigator > "u" || !navigator) return null; const r = [{ key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ }, { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ }, { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ }, { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ }, { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ }, { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }]; for (const { key: e, pattern: t } of r) { const n = t.exec(navigator.userAgent); if (n) { const s = n[1] || 0, i = n[2] || 0, a = n[3] || 0; return { browser: e, version: `${s}.${i}.${a}` } } } return null } const On = r => r === "x32" ? "x32" : r === "x86_64" || r === "x64" ? "x64" : r === "arm" ? "arm" : r === "aarch64" || r === "arm64" ? "arm64" : r ? `other:${r}` : "unknown", Mn = r => (r = r.toLowerCase(), r.includes("ios") ? "iOS" : r === "android" ? "Android" : r === "darwin" ? "MacOS" : r === "win32" ? "Windows" : r === "freebsd" ? "FreeBSD" : r === "openbsd" ? "OpenBSD" : r === "linux" ? "Linux" : r ? `Other:${r}` : "Unknown"); let Fn; const ai = () => Fn ?? (Fn = ri()), oi = r => { try { return JSON.parse(r) } catch { return } }, li = /^[a-z][a-z0-9+.-]*:/i, ci = r => li.test(r), qe = r => new Promise(e => setTimeout(e, r)), Rt = (r, e) => { if (typeof e != "number" || !Number.isInteger(e)) throw new b(`${r} must be an integer`); if (e < 0) throw new b(`${r} must be a positive integer`); return e }, Bt = r => { if (r instanceof Error) return r; if (typeof r == "object" && r !== null) try { return new Error(JSON.stringify(r)) } catch { } return new Error(r) }, Ke = r => { var e, t, n, s; if (typeof process < "u") return ((e = ke == null ? void 0 : ke[r]) == null ? void 0 : e.trim()) ?? void 0; if (typeof Deno < "u") return (s = (n = (t = Deno.env) == null ? void 0 : t.get) == null ? void 0 : n.call(t, r)) == null ? void 0 : s.trim() }; function Es(r) { if (!r) return !0; for (const e in r) return !1; return !0 } function $s(r, e) { return Object.prototype.hasOwnProperty.call(r, e) } function Nn(r, e) { for (const t in e) { if (!$s(e, t)) continue; const n = t.toLowerCase(); if (!n) continue; const s = e[t]; s === null ? delete r[n] : s !== void 0 && (r[n] = s) } } const Ln = new Set(["authorization", "api-key"]); function xe(r, ...e) { if (typeof process < "u" && (ke == null ? void 0 : ke.DEBUG) === "true") { const t = e.map(n => { if (!n) return n; if (n.headers) { const i = { ...n, headers: { ...n.headers } }; for (const a in n.headers) Ln.has(a.toLowerCase()) && (i.headers[a] = "REDACTED"); return i } let s = null; for (const i in n) Ln.has(i.toLowerCase()) && (s ?? (s = { ...n }), s[i] = "REDACTED"); return s ?? n }); console.log(`OpenAI:DEBUG:${r}`, ...t) } } const ui = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, r => { const e = Math.random() * 16 | 0; return (r === "x" ? e : e & 3 | 8).toString(16) }), hi = () => typeof window < "u" && typeof window.document < "u" && typeof navigator < "u", fi = r => typeof (r == null ? void 0 : r.get) == "function", Bn = (r, e) => { var n; const t = e.toLowerCase(); if (fi(r)) { const s = ((n = e[0]) == null ? void 0 : n.toUpperCase()) + e.substring(1).replace(/([^\w])(\w)/g, (i, a, o) => a + o.toUpperCase()); for (const i of [e, t, e.toUpperCase(), s]) { const a = r.get(i); if (a) return a } } for (const [s, i] of Object.entries(r)) if (s.toLowerCase() === t) return Array.isArray(i) ? (i.length <= 1 || console.warn(`Received ${i.length} entries for the ${e} header, using the first entry.`), i[0]) : i }; function vt(r) { return r != null && typeof r == "object" && !Array.isArray(r) } class di extends vs { constructor(e, t, n, s) { super(e, t, n, s), this.data = n.data || [], this.object = n.object } getPaginatedItems() { return this.data ?? [] } nextPageParams() { return null } nextPageInfo() { return null } } class Z extends vs { constructor(e, t, n, s) { super(e, t, n, s), this.data = n.data || [] } getPaginatedItems() { return this.data ?? [] } nextPageParams() { const e = this.nextPageInfo(); if (!e) return null; if ("params" in e) return e.params; const t = Object.fromEntries(e.url.searchParams); return Object.keys(t).length ? t : null } nextPageInfo() { var n; const e = this.getPaginatedItems(); if (!e.length) return null; const t = (n = e[e.length - 1]) == null ? void 0 : n.id; return t ? { params: { after: t } } : null } } class A { constructor(e) { this._client = e } } let Ps = class extends A { create(e, t) { return this._client.post("/chat/completions", { body: e, ...t, stream: e.stream ?? !1 }) } }, Gt = class extends A { constructor() { super(...arguments), this.completions = new Ps(this._client) } }; Gt.Completions = Ps; class Is extends A { create(e, t) { return this._client.post("/audio/speech", { body: e, ...t, headers: { Accept: "application/octet-stream", ...t == null ? void 0 : t.headers }, __binaryResponse: !0 }) } } class Ts extends A { create(e, t) { return this._client.post("/audio/transcriptions", Ce({ body: e, ...t })) } } class Os extends A { create(e, t) { return this._client.post("/audio/translations", Ce({ body: e, ...t })) } } class We extends A { constructor() { super(...arguments), this.transcriptions = new Ts(this._client), this.translations = new Os(this._client), this.speech = new Is(this._client) } } We.Transcriptions = Ts; We.Translations = Os; We.Speech = Is; class Kt extends A { create(e, t) { return this._client.post("/batches", { body: e, ...t }) } retrieve(e, t) { return this._client.get(`/batches/${e}`, t) } list(e = {}, t) { return W(e) ? this.list({}, e) : this._client.getAPIList("/batches", Zt, { query: e, ...t }) } cancel(e, t) { return this._client.post(`/batches/${e}/cancel`, t) } } class Zt extends Z { } Kt.BatchesPage = Zt; class Yt extends A { create(e, t) { return this._client.post("/assistants", { body: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } retrieve(e, t) { return this._client.get(`/assistants/${e}`, { ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } update(e, t, n) { return this._client.post(`/assistants/${e}`, { body: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } list(e = {}, t) { return W(e) ? this.list({}, e) : this._client.getAPIList("/assistants", en, { query: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } del(e, t) { return this._client.delete(`/assistants/${e}`, { ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } } class en extends Z { } Yt.AssistantsPage = en; function Dn(r) { return typeof r.parse == "function" } const Se = r => (r == null ? void 0 : r.role) === "assistant", Ms = r => (r == null ? void 0 : r.role) === "function", Fs = r => (r == null ? void 0 : r.role) === "tool"; var V = function (r, e, t, n, s) { if (n === "m") throw new TypeError("Private method is not writable"); if (n === "a" && !s) throw new TypeError("Private accessor was defined without a setter"); if (typeof e == "function" ? r !== e || !s : !e.has(r)) throw new TypeError("Cannot write private member to an object whose class did not declare it"); return n === "a" ? s.call(r, t) : s ? s.value = t : e.set(r, t), t }, T = function (r, e, t, n) { if (t === "a" && !n) throw new TypeError("Private accessor was defined without a getter"); if (typeof e == "function" ? r !== e || !n : !e.has(r)) throw new TypeError("Cannot read private member from an object whose class did not declare it"); return t === "m" ? n : t === "a" ? n.call(r) : n ? n.value : e.get(r) }, Dt, rt, it, Pe, Ie, at, Te, ae, Oe, ut, ht, _e, Ns; class Ls { constructor() { Dt.add(this), this.controller = new AbortController, rt.set(this, void 0), it.set(this, () => { }), Pe.set(this, () => { }), Ie.set(this, void 0), at.set(this, () => { }), Te.set(this, () => { }), ae.set(this, {}), Oe.set(this, !1), ut.set(this, !1), ht.set(this, !1), _e.set(this, !1), V(this, rt, new Promise((e, t) => { V(this, it, e, "f"), V(this, Pe, t, "f") }), "f"), V(this, Ie, new Promise((e, t) => { V(this, at, e, "f"), V(this, Te, t, "f") }), "f"), T(this, rt, "f").catch(() => { }), T(this, Ie, "f").catch(() => { }) } _run(e) { setTimeout(() => { e().then(() => { this._emitFinal(), this._emit("end") }, T(this, Dt, "m", Ns).bind(this)) }, 0) } _connected() { this.ended || (T(this, it, "f").call(this), this._emit("connect")) } get ended() { return T(this, Oe, "f") } get errored() { return T(this, ut, "f") } get aborted() { return T(this, ht, "f") } abort() { this.controller.abort() } on(e, t) { return (T(this, ae, "f")[e] || (T(this, ae, "f")[e] = [])).push({ listener: t }), this } off(e, t) { const n = T(this, ae, "f")[e]; if (!n) return this; const s = n.findIndex(i => i.listener === t); return s >= 0 && n.splice(s, 1), this } once(e, t) { return (T(this, ae, "f")[e] || (T(this, ae, "f")[e] = [])).push({ listener: t, once: !0 }), this } emitted(e) { return new Promise((t, n) => { V(this, _e, !0, "f"), e !== "error" && this.once("error", n), this.once(e, t) }) } async done() { V(this, _e, !0, "f"), await T(this, Ie, "f") } _emit(e, ...t) { if (T(this, Oe, "f")) return; e === "end" && (V(this, Oe, !0, "f"), T(this, at, "f").call(this)); const n = T(this, ae, "f")[e]; if (n && (T(this, ae, "f")[e] = n.filter(s => !s.once), n.forEach(({ listener: s }) => s(...t))), e === "abort") { const s = t[0]; !T(this, _e, "f") && !(n != null && n.length) && Promise.reject(s), T(this, Pe, "f").call(this, s), T(this, Te, "f").call(this, s), this._emit("end"); return } if (e === "error") { const s = t[0]; !T(this, _e, "f") && !(n != null && n.length) && Promise.reject(s), T(this, Pe, "f").call(this, s), T(this, Te, "f").call(this, s), this._emit("end") } } _emitFinal() { } } rt = new WeakMap, it = new WeakMap, Pe = new WeakMap, Ie = new WeakMap, at = new WeakMap, Te = new WeakMap, ae = new WeakMap, Oe = new WeakMap, ut = new WeakMap, ht = new WeakMap, _e = new WeakMap, Dt = new WeakSet, Ns = function (e) { if (V(this, ut, !0, "f"), e instanceof Error && e.name === "AbortError" && (e = new G), e instanceof G) return V(this, ht, !0, "f"), this._emit("abort", e); if (e instanceof b) return this._emit("error", e); if (e instanceof Error) { const t = new b(e.message); return t.cause = e, this._emit("error", t) } return this._emit("error", new b(String(e))) }; function Bs(r) { return (r == null ? void 0 : r.$brand) === "auto-parseable-response-format" } function je(r) { return (r == null ? void 0 : r.$brand) === "auto-parseable-tool" } function mi(r, e) { return !e || !Ds(e) ? { ...r, choices: r.choices.map(t => ({ ...t, message: { ...t.message, parsed: null, tool_calls: t.message.tool_calls ?? [] } })) } : tn(r, e) } function tn(r, e) { const t = r.choices.map(n => { var s; if (n.finish_reason === "length") throw new _s; if (n.finish_reason === "content_filter") throw new bs; return { ...n, message: { ...n.message, tool_calls: ((s = n.message.tool_calls) == null ? void 0 : s.map(i => gi(e, i))) ?? [], parsed: n.message.content && !n.message.refusal ? pi(e, n.message.content) : null } } }); return { ...r, choices: t } } function pi(r, e) { var t, n; return ((t = r.response_format) == null ? void 0 : t.type) !== "json_schema" ? null : ((n = r.response_format) == null ? void 0 : n.type) === "json_schema" ? "$parseRaw" in r.response_format ? r.response_format.$parseRaw(e) : JSON.parse(e) : null } function gi(r, e) { var n; const t = (n = r.tools) == null ? void 0 : n.find(s => { var i; return ((i = s.function) == null ? void 0 : i.name) === e.function.name }); return { ...e, function: { ...e.function, parsed_arguments: je(t) ? t.$parseRaw(e.function.arguments) : t != null && t.function.strict ? JSON.parse(e.function.arguments) : null } } } function yi(r, e) { var n; if (!r) return !1; const t = (n = r.tools) == null ? void 0 : n.find(s => { var i; return ((i = s.function) == null ? void 0 : i.name) === e.function.name }); return je(t) || (t == null ? void 0 : t.function.strict) || !1 } function Ds(r) { var e; return Bs(r.response_format) ? !0 : ((e = r.tools) == null ? void 0 : e.some(t => je(t) || t.type === "function" && t.function.strict === !0)) ?? !1 } function wi(r) { for (const e of r ?? []) { if (e.type !== "function") throw new b(`Currently only \`function\` tool types support auto-parsing; Received \`${e.type}\``); if (e.function.strict !== !0) throw new b(`The \`${e.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`) } } var q = function (r, e, t, n) { if (t === "a" && !n) throw new TypeError("Private accessor was defined without a getter"); if (typeof e == "function" ? r !== e || !n : !e.has(r)) throw new TypeError("Cannot read private member from an object whose class did not declare it"); return t === "m" ? n : t === "a" ? n.call(r) : n ? n.value : e.get(r) }, U, zt, ft, Ut, qt, Wt, zs, jt; const zn = 10; class Us extends Ls { constructor() { super(...arguments), U.add(this), this._chatCompletions = [], this.messages = [] } _addChatCompletion(e) { var n; this._chatCompletions.push(e), this._emit("chatCompletion", e); const t = (n = e.choices[0]) == null ? void 0 : n.message; return t && this._addMessage(t), e } _addMessage(e, t = !0) { if ("content" in e || (e.content = null), this.messages.push(e), t) { if (this._emit("message", e), (Ms(e) || Fs(e)) && e.content) this._emit("functionCallResult", e.content); else if (Se(e) && e.function_call) this._emit("functionCall", e.function_call); else if (Se(e) && e.tool_calls) for (const n of e.tool_calls) n.type === "function" && this._emit("functionCall", n.function) } } async finalChatCompletion() { await this.done(); const e = this._chatCompletions[this._chatCompletions.length - 1]; if (!e) throw new b("stream ended without producing a ChatCompletion"); return e } async finalContent() { return await this.done(), q(this, U, "m", zt).call(this) } async finalMessage() { return await this.done(), q(this, U, "m", ft).call(this) } async finalFunctionCall() { return await this.done(), q(this, U, "m", Ut).call(this) } async finalFunctionCallResult() { return await this.done(), q(this, U, "m", qt).call(this) } async totalUsage() { return await this.done(), q(this, U, "m", Wt).call(this) } allChatCompletions() { return [...this._chatCompletions] } _emitFinal() { const e = this._chatCompletions[this._chatCompletions.length - 1]; e && this._emit("finalChatCompletion", e); const t = q(this, U, "m", ft).call(this); t && this._emit("finalMessage", t); const n = q(this, U, "m", zt).call(this); n && this._emit("finalContent", n); const s = q(this, U, "m", Ut).call(this); s && this._emit("finalFunctionCall", s); const i = q(this, U, "m", qt).call(this); i != null && this._emit("finalFunctionCallResult", i), this._chatCompletions.some(a => a.usage) && this._emit("totalUsage", q(this, U, "m", Wt).call(this)) } async _createChatCompletion(e, t, n) { const s = n == null ? void 0 : n.signal; s && (s.aborted && this.controller.abort(), s.addEventListener("abort", () => this.controller.abort())), q(this, U, "m", zs).call(this, t); const i = await e.chat.completions.create({ ...t, stream: !1 }, { ...n, signal: this.controller.signal }); return this._connected(), this._addChatCompletion(tn(i, t)) } async _runChatCompletion(e, t, n) { for (const s of t.messages) this._addMessage(s, !1); return await this._createChatCompletion(e, t, n) } async _runFunctions(e, t, n) { var h; const s = "function", { function_call: i = "auto", stream: a, ...o } = t, l = typeof i != "string" && (i == null ? void 0 : i.name), { maxChatCompletions: u = zn } = n || {}, f = {}; for (const d of t.functions) f[d.name || d.function.name] = d; const c = t.functions.map(d => ({ name: d.name || d.function.name, parameters: d.parameters, description: d.description })); for (const d of t.messages) this._addMessage(d, !1); for (let d = 0; d < u; ++d) { const m = (h = (await this._createChatCompletion(e, { ...o, function_call: i, functions: c, messages: [...this.messages] }, n)).choices[0]) == null ? void 0 : h.message; if (!m) throw new b("missing message in ChatCompletion response"); if (!m.function_call) return; const { name: g, arguments: M } = m.function_call, p = f[g]; if (p) { if (l && l !== g) { const C = `Invalid function_call: ${JSON.stringify(g)}. ${JSON.stringify(l)} requested. Please try again`; this._addMessage({ role: s, name: g, content: C }); continue } } else { const C = `Invalid function_call: ${JSON.stringify(g)}. Available options are: ${c.map(x => JSON.stringify(x.name)).join(", ")}. Please try again`; this._addMessage({ role: s, name: g, content: C }); continue } let k; try { k = Dn(p) ? await p.parse(M) : M } catch (C) { this._addMessage({ role: s, name: g, content: C instanceof Error ? C.message : String(C) }); continue } const _ = await p.function(k, this), I = q(this, U, "m", jt).call(this, _); if (this._addMessage({ role: s, name: g, content: I }), l) return } } async _runTools(e, t, n) { var d, w, m; const s = "tool", { tool_choice: i = "auto", stream: a, ...o } = t, l = typeof i != "string" && ((d = i == null ? void 0 : i.function) == null ? void 0 : d.name), { maxChatCompletions: u = zn } = n || {}, f = t.tools.map(g => { if (je(g)) { if (!g.$callback) throw new b("Tool given to `.runTools()` that does not have an associated function"); return { type: "function", function: { function: g.$callback, name: g.function.name, description: g.function.description || "", parameters: g.function.parameters, parse: g.$parseRaw, strict: !0 } } } return g }), c = {}; for (const g of f) g.type === "function" && (c[g.function.name || g.function.function.name] = g.function); const h = "tools" in t ? f.map(g => g.type === "function" ? { type: "function", function: { name: g.function.name || g.function.function.name, parameters: g.function.parameters, description: g.function.description, strict: g.function.strict } } : g) : void 0; for (const g of t.messages) this._addMessage(g, !1); for (let g = 0; g < u; ++g) { const p = (w = (await this._createChatCompletion(e, { ...o, tool_choice: i, tools: h, messages: [...this.messages] }, n)).choices[0]) == null ? void 0 : w.message; if (!p) throw new b("missing message in ChatCompletion response"); if (!((m = p.tool_calls) != null && m.length)) return; for (const k of p.tool_calls) { if (k.type !== "function") continue; const _ = k.id, { name: I, arguments: C } = k.function, x = c[I]; if (x) { if (l && l !== I) { const $ = `Invalid tool_call: ${JSON.stringify(I)}. ${JSON.stringify(l)} requested. Please try again`; this._addMessage({ role: s, tool_call_id: _, content: $ }); continue } } else { const $ = `Invalid tool_call: ${JSON.stringify(I)}. Available options are: ${Object.keys(c).map(pe => JSON.stringify(pe)).join(", ")}. Please try again`; this._addMessage({ role: s, tool_call_id: _, content: $ }); continue } let X; try { X = Dn(x) ? await x.parse(C) : C } catch ($) { const pe = $ instanceof Error ? $.message : String($); this._addMessage({ role: s, tool_call_id: _, content: pe }); continue } const F = await x.function(X, this), O = q(this, U, "m", jt).call(this, F); if (this._addMessage({ role: s, tool_call_id: _, content: O }), l) return } } } } U = new WeakSet, zt = function () { return q(this, U, "m", ft).call(this).content ?? null }, ft = function () { let e = this.messages.length; for (; e-- > 0;) { const t = this.messages[e]; if (Se(t)) { const { function_call: n, ...s } = t, i = { ...s, content: t.content ?? null, refusal: t.refusal ?? null }; return n && (i.function_call = n), i } } throw new b("stream ended without producing a ChatCompletionMessage with role=assistant") }, Ut = function () { var e, t; for (let n = this.messages.length - 1; n >= 0; n--) { const s = this.messages[n]; if (Se(s) && (s != null && s.function_call)) return s.function_call; if (Se(s) && ((e = s == null ? void 0 : s.tool_calls) != null && e.length)) return (t = s.tool_calls.at(-1)) == null ? void 0 : t.function } }, qt = function () { for (let e = this.messages.length - 1; e >= 0; e--) { const t = this.messages[e]; if (Ms(t) && t.content != null || Fs(t) && t.content != null && typeof t.content == "string" && this.messages.some(n => { var s; return n.role === "assistant" && ((s = n.tool_calls) == null ? void 0 : s.some(i => i.type === "function" && i.id === t.tool_call_id)) })) return t.content } }, Wt = function () { const e = { completion_tokens: 0, prompt_tokens: 0, total_tokens: 0 }; for (const { usage: t } of this._chatCompletions) t && (e.completion_tokens += t.completion_tokens, e.prompt_tokens += t.prompt_tokens, e.total_tokens += t.total_tokens); return e }, zs = function (e) { if (e.n != null && e.n > 1) throw new b("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.") }, jt = function (e) { return typeof e == "string" ? e : e === void 0 ? "undefined" : JSON.stringify(e) }; class ze extends Us { static runFunctions(e, t, n) { const s = new ze, i = { ...n, headers: { ...n == null ? void 0 : n.headers, "X-Stainless-Helper-Method": "runFunctions" } }; return s._run(() => s._runFunctions(e, t, i)), s } static runTools(e, t, n) { const s = new ze, i = { ...n, headers: { ...n == null ? void 0 : n.headers, "X-Stainless-Helper-Method": "runTools" } }; return s._run(() => s._runTools(e, t, i)), s } _addMessage(e, t = !0) { super._addMessage(e, t), Se(e) && e.content && this._emit("content", e.content) } } const qs = 1, Ws = 2, js = 4, Hs = 8, Js = 16, Xs = 32, Vs = 64, Qs = 128, Gs = 256, Ks = Qs | Gs, Zs = Js | Xs | Ks | Vs, Ys = qs | Ws | Zs, er = js | Hs, _i = Ys | er, B = { STR: qs, NUM: Ws, ARR: js, OBJ: Hs, NULL: Js, BOOL: Xs, NAN: Vs, INFINITY: Qs, MINUS_INFINITY: Gs, INF: Ks, SPECIAL: Zs, ATOM: Ys, COLLECTION: er, ALL: _i }; class bi extends Error { } class ki extends Error { } function xi(r, e = B.ALL) { if (typeof r != "string") throw new TypeError(`expecting str, got ${typeof r}`); if (!r.trim()) throw new Error(`${r} is empty`); return Si(r.trim(), e) } const Si = (r, e) => {
  const t = r.length; let n = 0; const s = h => { throw new bi(`${h} at position ${n}`) }, i = h => { throw new ki(`${h} at position ${n}`) }, a = () => (c(), n >= t && s("Unexpected end of input"), r[n] === '"' ? o() : r[n] === "{" ? l() : r[n] === "[" ? u() : r.substring(n, n + 4) === "null" || B.NULL & e && t - n < 4 && "null".startsWith(r.substring(n)) ? (n += 4, null) : r.substring(n, n + 4) === "true" || B.BOOL & e && t - n < 4 && "true".startsWith(r.substring(n)) ? (n += 4, !0) : r.substring(n, n + 5) === "false" || B.BOOL & e && t - n < 5 && "false".startsWith(r.substring(n)) ? (n += 5, !1) : r.substring(n, n + 8) === "Infinity" || B.INFINITY & e && t - n < 8 && "Infinity".startsWith(r.substring(n)) ? (n += 8, 1 / 0) : r.substring(n, n + 9) === "-Infinity" || B.MINUS_INFINITY & e && 1 < t - n && t - n < 9 && "-Infinity".startsWith(r.substring(n)) ? (n += 9, -1 / 0) : r.substring(n, n + 3) === "NaN" || B.NAN & e && t - n < 3 && "NaN".startsWith(r.substring(n)) ? (n += 3, NaN) : f()), o = () => { const h = n; let d = !1; for (n++; n < t && (r[n] !== '"' || d && r[n - 1] === "\\");)d = r[n] === "\\" ? !d : !1, n++; if (r.charAt(n) == '"') try { return JSON.parse(r.substring(h, ++n - Number(d))) } catch (w) { i(String(w)) } else if (B.STR & e) try { return JSON.parse(r.substring(h, n - Number(d)) + '"') } catch { return JSON.parse(r.substring(h, r.lastIndexOf("\\")) + '"') } s("Unterminated string literal") }, l = () => { n++, c(); const h = {}; try { for (; r[n] !== "}";) { if (c(), n >= t && B.OBJ & e) return h; const d = o(); c(), n++; try { const w = a(); Object.defineProperty(h, d, { value: w, writable: !0, enumerable: !0, configurable: !0 }) } catch (w) { if (B.OBJ & e) return h; throw w } c(), r[n] === "," && n++ } } catch { if (B.OBJ & e) return h; s("Expected '}' at end of object") } return n++, h }, u = () => { n++; const h = []; try { for (; r[n] !== "]";)h.push(a()), c(), r[n] === "," && n++ } catch { if (B.ARR & e) return h; s("Expected ']' at end of array") } return n++, h }, f = () => { if (n === 0) { r === "-" && B.NUM & e && s("Not sure what '-' is"); try { return JSON.parse(r) } catch (d) { if (B.NUM & e) try { return r[r.length - 1] === "." ? JSON.parse(r.substring(0, r.lastIndexOf("."))) : JSON.parse(r.substring(0, r.lastIndexOf("e"))) } catch { } i(String(d)) } } const h = n; for (r[n] === "-" && n++; r[n] && !",]}".includes(r[n]);)n++; n == t && !(B.NUM & e) && s("Unterminated number literal"); try { return JSON.parse(r.substring(h, n)) } catch { r.substring(h, n) === "-" && B.NUM & e && s("Not sure what '-' is"); try { return JSON.parse(r.substring(h, r.lastIndexOf("e"))) } catch (w) { i(String(w)) } } }, c = () => {
    for (; n < t && ` 
\r	`.includes(r[n]);)n++
  }; return a()
}, Un = r => xi(r, B.ALL ^ B.NUM); var ge = function (r, e, t, n, s) { if (n === "m") throw new TypeError("Private method is not writable"); if (n === "a" && !s) throw new TypeError("Private accessor was defined without a setter"); if (typeof e == "function" ? r !== e || !s : !e.has(r)) throw new TypeError("Cannot write private member to an object whose class did not declare it"); return n === "a" ? s.call(r, t) : s ? s.value = t : e.set(r, t), t }, v = function (r, e, t, n) { if (t === "a" && !n) throw new TypeError("Private accessor was defined without a getter"); if (typeof e == "function" ? r !== e || !n : !e.has(r)) throw new TypeError("Cannot read private member from an object whose class did not declare it"); return t === "m" ? n : t === "a" ? n.call(r) : n ? n.value : e.get(r) }, N, ie, ye, oe, Et, Ze, $t, Pt, It, Ye, Tt, qn; class Ue extends Us { constructor(e) { super(), N.add(this), ie.set(this, void 0), ye.set(this, void 0), oe.set(this, void 0), ge(this, ie, e, "f"), ge(this, ye, [], "f") } get currentChatCompletionSnapshot() { return v(this, oe, "f") } static fromReadableStream(e) { const t = new Ue(null); return t._run(() => t._fromReadableStream(e)), t } static createChatCompletion(e, t, n) { const s = new Ue(t); return s._run(() => s._runChatCompletion(e, { ...t, stream: !0 }, { ...n, headers: { ...n == null ? void 0 : n.headers, "X-Stainless-Helper-Method": "stream" } })), s } async _createChatCompletion(e, t, n) { var a; super._createChatCompletion; const s = n == null ? void 0 : n.signal; s && (s.aborted && this.controller.abort(), s.addEventListener("abort", () => this.controller.abort())), v(this, N, "m", Et).call(this); const i = await e.chat.completions.create({ ...t, stream: !0 }, { ...n, signal: this.controller.signal }); this._connected(); for await (const o of i) v(this, N, "m", $t).call(this, o); if ((a = i.controller.signal) != null && a.aborted) throw new G; return this._addChatCompletion(v(this, N, "m", Ye).call(this)) } async _fromReadableStream(e, t) { var a; const n = t == null ? void 0 : t.signal; n && (n.aborted && this.controller.abort(), n.addEventListener("abort", () => this.controller.abort())), v(this, N, "m", Et).call(this), this._connected(); const s = ne.fromReadableStream(e, this.controller); let i; for await (const o of s) i && i !== o.id && this._addChatCompletion(v(this, N, "m", Ye).call(this)), v(this, N, "m", $t).call(this, o), i = o.id; if ((a = s.controller.signal) != null && a.aborted) throw new G; return this._addChatCompletion(v(this, N, "m", Ye).call(this)) } [(ie = new WeakMap, ye = new WeakMap, oe = new WeakMap, N = new WeakSet, Et = function () { this.ended || ge(this, oe, void 0, "f") }, Ze = function (t) { let n = v(this, ye, "f")[t.index]; return n || (n = { content_done: !1, refusal_done: !1, logprobs_content_done: !1, logprobs_refusal_done: !1, done_tool_calls: new Set, current_tool_call_index: null }, v(this, ye, "f")[t.index] = n, n) }, $t = function (t) { var s, i, a, o, l, u, f, c, h, d, w, m, g, M, p; if (this.ended) return; const n = v(this, N, "m", qn).call(this, t); this._emit("chunk", t, n); for (const k of t.choices) { const _ = n.choices[k.index]; k.delta.content != null && ((s = _.message) == null ? void 0 : s.role) === "assistant" && ((i = _.message) != null && i.content) && (this._emit("content", k.delta.content, _.message.content), this._emit("content.delta", { delta: k.delta.content, snapshot: _.message.content, parsed: _.message.parsed })), k.delta.refusal != null && ((a = _.message) == null ? void 0 : a.role) === "assistant" && ((o = _.message) != null && o.refusal) && this._emit("refusal.delta", { delta: k.delta.refusal, snapshot: _.message.refusal }), ((l = k.logprobs) == null ? void 0 : l.content) != null && ((u = _.message) == null ? void 0 : u.role) === "assistant" && this._emit("logprobs.content.delta", { content: (f = k.logprobs) == null ? void 0 : f.content, snapshot: ((c = _.logprobs) == null ? void 0 : c.content) ?? [] }), ((h = k.logprobs) == null ? void 0 : h.refusal) != null && ((d = _.message) == null ? void 0 : d.role) === "assistant" && this._emit("logprobs.refusal.delta", { refusal: (w = k.logprobs) == null ? void 0 : w.refusal, snapshot: ((m = _.logprobs) == null ? void 0 : m.refusal) ?? [] }); const I = v(this, N, "m", Ze).call(this, _); _.finish_reason && (v(this, N, "m", It).call(this, _), I.current_tool_call_index != null && v(this, N, "m", Pt).call(this, _, I.current_tool_call_index)); for (const C of k.delta.tool_calls ?? []) I.current_tool_call_index !== C.index && (v(this, N, "m", It).call(this, _), I.current_tool_call_index != null && v(this, N, "m", Pt).call(this, _, I.current_tool_call_index)), I.current_tool_call_index = C.index; for (const C of k.delta.tool_calls ?? []) { const x = (g = _.message.tool_calls) == null ? void 0 : g[C.index]; x != null && x.type && ((x == null ? void 0 : x.type) === "function" ? this._emit("tool_calls.function.arguments.delta", { name: (M = x.function) == null ? void 0 : M.name, index: C.index, arguments: x.function.arguments, parsed_arguments: x.function.parsed_arguments, arguments_delta: ((p = C.function) == null ? void 0 : p.arguments) ?? "" }) : (x == null || x.type, void 0)) } } }, Pt = function (t, n) { var a, o, l; if (v(this, N, "m", Ze).call(this, t).done_tool_calls.has(n)) return; const i = (a = t.message.tool_calls) == null ? void 0 : a[n]; if (!i) throw new Error("no tool call snapshot"); if (!i.type) throw new Error("tool call snapshot missing `type`"); if (i.type === "function") { const u = (l = (o = v(this, ie, "f")) == null ? void 0 : o.tools) == null ? void 0 : l.find(f => f.type === "function" && f.function.name === i.function.name); this._emit("tool_calls.function.arguments.done", { name: i.function.name, index: n, arguments: i.function.arguments, parsed_arguments: je(u) ? u.$parseRaw(i.function.arguments) : u != null && u.function.strict ? JSON.parse(i.function.arguments) : null }) } else i.type }, It = function (t) { var s, i; const n = v(this, N, "m", Ze).call(this, t); if (t.message.content && !n.content_done) { n.content_done = !0; const a = v(this, N, "m", Tt).call(this); this._emit("content.done", { content: t.message.content, parsed: a ? a.$parseRaw(t.message.content) : null }) } t.message.refusal && !n.refusal_done && (n.refusal_done = !0, this._emit("refusal.done", { refusal: t.message.refusal })), (s = t.logprobs) != null && s.content && !n.logprobs_content_done && (n.logprobs_content_done = !0, this._emit("logprobs.content.done", { content: t.logprobs.content })), (i = t.logprobs) != null && i.refusal && !n.logprobs_refusal_done && (n.logprobs_refusal_done = !0, this._emit("logprobs.refusal.done", { refusal: t.logprobs.refusal })) }, Ye = function () { if (this.ended) throw new b("stream has ended, this shouldn't happen"); const t = v(this, oe, "f"); if (!t) throw new b("request ended without sending any chunks"); return ge(this, oe, void 0, "f"), ge(this, ye, [], "f"), Ai(t, v(this, ie, "f")) }, Tt = function () { var n; const t = (n = v(this, ie, "f")) == null ? void 0 : n.response_format; return Bs(t) ? t : null }, qn = function (t) { var n, s, i, a; let o = v(this, oe, "f"); const { choices: l, ...u } = t; o ? Object.assign(o, u) : o = ge(this, oe, { ...u, choices: [] }, "f"); for (const { delta: f, finish_reason: c, index: h, logprobs: d = null, ...w } of t.choices) { let m = o.choices[h]; if (m || (m = o.choices[h] = { finish_reason: c, index: h, message: {}, logprobs: d, ...w }), d) if (!m.logprobs) m.logprobs = Object.assign({}, d); else { const { content: C, refusal: x, ...X } = d; Object.assign(m.logprobs, X), C && ((n = m.logprobs).content ?? (n.content = []), m.logprobs.content.push(...C)), x && ((s = m.logprobs).refusal ?? (s.refusal = []), m.logprobs.refusal.push(...x)) } if (c && (m.finish_reason = c, v(this, ie, "f") && Ds(v(this, ie, "f")))) { if (c === "length") throw new _s; if (c === "content_filter") throw new bs } if (Object.assign(m, w), !f) continue; const { content: g, refusal: M, function_call: p, role: k, tool_calls: _, ...I } = f; if (Object.assign(m.message, I), M && (m.message.refusal = (m.message.refusal || "") + M), k && (m.message.role = k), p && (m.message.function_call ? (p.name && (m.message.function_call.name = p.name), p.arguments && ((i = m.message.function_call).arguments ?? (i.arguments = ""), m.message.function_call.arguments += p.arguments)) : m.message.function_call = p), g && (m.message.content = (m.message.content || "") + g, !m.message.refusal && v(this, N, "m", Tt).call(this) && (m.message.parsed = Un(m.message.content))), _) { m.message.tool_calls || (m.message.tool_calls = []); for (const { index: C, id: x, type: X, function: F, ...O } of _) { const $ = (a = m.message.tool_calls)[C] ?? (a[C] = {}); Object.assign($, O), x && ($.id = x), X && ($.type = X), F && ($.function ?? ($.function = { name: F.name ?? "", arguments: "" })), F != null && F.name && ($.function.name = F.name), F != null && F.arguments && ($.function.arguments += F.arguments, yi(v(this, ie, "f"), $) && ($.function.parsed_arguments = Un($.function.arguments))) } } } return o }, Symbol.asyncIterator)]() { const e = [], t = []; let n = !1; return this.on("chunk", s => { const i = t.shift(); i ? i.resolve(s) : e.push(s) }), this.on("end", () => { n = !0; for (const s of t) s.resolve(void 0); t.length = 0 }), this.on("abort", s => { n = !0; for (const i of t) i.reject(s); t.length = 0 }), this.on("error", s => { n = !0; for (const i of t) i.reject(s); t.length = 0 }), { next: async () => e.length ? { value: e.shift(), done: !1 } : n ? { value: void 0, done: !0 } : new Promise((i, a) => t.push({ resolve: i, reject: a })).then(i => i ? { value: i, done: !1 } : { value: void 0, done: !0 }), return: async () => (this.abort(), { value: void 0, done: !0 }) } } toReadableStream() { return new ne(this[Symbol.asyncIterator].bind(this), this.controller).toReadableStream() } } function Ai(r, e) {
  const { id: t, choices: n, created: s, model: i, system_fingerprint: a, ...o } = r, l = {
    ...o, id: t, choices: n.map(({ message: u, finish_reason: f, index: c, logprobs: h, ...d }) => {
      if (!f) throw new b(`missing finish_reason for choice ${c}`); const { content: w = null, function_call: m, tool_calls: g, ...M } = u, p = u.role; if (!p) throw new b(`missing role for choice ${c}`); if (m) { const { arguments: k, name: _ } = m; if (k == null) throw new b(`missing function_call.arguments for choice ${c}`); if (!_) throw new b(`missing function_call.name for choice ${c}`); return { ...d, message: { content: w, function_call: { arguments: k, name: _ }, role: p, refusal: u.refusal ?? null }, finish_reason: f, index: c, logprobs: h } } return g ? {
        ...d, index: c, finish_reason: f, logprobs: h, message: {
          ...M, role: p, content: w, refusal: u.refusal ?? null, tool_calls: g.map((k, _) => {
            const { function: I, type: C, id: x, ...X } = k, { arguments: F, name: O, ...$ } = I || {}; if (x == null) throw new b(`missing choices[${c}].tool_calls[${_}].id
${et(r)}`); if (C == null) throw new b(`missing choices[${c}].tool_calls[${_}].type
${et(r)}`); if (O == null) throw new b(`missing choices[${c}].tool_calls[${_}].function.name
${et(r)}`); if (F == null) throw new b(`missing choices[${c}].tool_calls[${_}].function.arguments
${et(r)}`); return { ...X, id: x, type: C, function: { ...$, name: O, arguments: F } }
          })
        }
      } : { ...d, message: { ...M, content: w, role: p, refusal: u.refusal ?? null }, finish_reason: f, index: c, logprobs: h }
    }), created: s, model: i, object: "chat.completion", ...a ? { system_fingerprint: a } : {}
  }; return mi(l, e)
} function et(r) { return JSON.stringify(r) } class Ae extends Ue { static fromReadableStream(e) { const t = new Ae(null); return t._run(() => t._fromReadableStream(e)), t } static runFunctions(e, t, n) { const s = new Ae(null), i = { ...n, headers: { ...n == null ? void 0 : n.headers, "X-Stainless-Helper-Method": "runFunctions" } }; return s._run(() => s._runFunctions(e, t, i)), s } static runTools(e, t, n) { const s = new Ae(t), i = { ...n, headers: { ...n == null ? void 0 : n.headers, "X-Stainless-Helper-Method": "runTools" } }; return s._run(() => s._runTools(e, t, i)), s } } let tr = class extends A { parse(e, t) { return wi(e.tools), this._client.chat.completions.create(e, { ...t, headers: { ...t == null ? void 0 : t.headers, "X-Stainless-Helper-Method": "beta.chat.completions.parse" } })._thenUnwrap(n => tn(n, e)) } runFunctions(e, t) { return e.stream ? Ae.runFunctions(this._client, e, t) : ze.runFunctions(this._client, e, t) } runTools(e, t) { return e.stream ? Ae.runTools(this._client, e, t) : ze.runTools(this._client, e, t) } stream(e, t) { return Ue.createChatCompletion(this._client, e, t) } }; class nr extends A { constructor() { super(...arguments), this.completions = new tr(this._client) } } (function (r) { r.Completions = tr })(nr); class sr extends A { create(e, t) { return this._client.post("/realtime/sessions", { body: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } } class nn extends A { constructor() { super(...arguments), this.sessions = new sr(this._client) } } nn.Sessions = sr; var y = function (r, e, t, n) { if (t === "a" && !n) throw new TypeError("Private accessor was defined without a getter"); if (typeof e == "function" ? r !== e || !n : !e.has(r)) throw new TypeError("Cannot read private member from an object whose class did not declare it"); return t === "m" ? n : t === "a" ? n.call(r) : n ? n.value : e.get(r) }, j = function (r, e, t, n, s) { if (n === "m") throw new TypeError("Private method is not writable"); if (n === "a" && !s) throw new TypeError("Private accessor was defined without a setter"); if (typeof e == "function" ? r !== e || !s : !e.has(r)) throw new TypeError("Cannot write private member to an object whose class did not declare it"); return n === "a" ? s.call(r, t) : s ? s.value = t : e.set(r, t), t }, D, Ht, te, ot, Q, ue, be, ce, dt, H, lt, ct, Le, Me, Fe, Wn, jn, Hn, Jn, Xn, Vn, Qn; class K extends Ls { constructor() { super(...arguments), D.add(this), Ht.set(this, []), te.set(this, {}), ot.set(this, {}), Q.set(this, void 0), ue.set(this, void 0), be.set(this, void 0), ce.set(this, void 0), dt.set(this, void 0), H.set(this, void 0), lt.set(this, void 0), ct.set(this, void 0), Le.set(this, void 0) } [(Ht = new WeakMap, te = new WeakMap, ot = new WeakMap, Q = new WeakMap, ue = new WeakMap, be = new WeakMap, ce = new WeakMap, dt = new WeakMap, H = new WeakMap, lt = new WeakMap, ct = new WeakMap, Le = new WeakMap, D = new WeakSet, Symbol.asyncIterator)]() { const e = [], t = []; let n = !1; return this.on("event", s => { const i = t.shift(); i ? i.resolve(s) : e.push(s) }), this.on("end", () => { n = !0; for (const s of t) s.resolve(void 0); t.length = 0 }), this.on("abort", s => { n = !0; for (const i of t) i.reject(s); t.length = 0 }), this.on("error", s => { n = !0; for (const i of t) i.reject(s); t.length = 0 }), { next: async () => e.length ? { value: e.shift(), done: !1 } : n ? { value: void 0, done: !0 } : new Promise((i, a) => t.push({ resolve: i, reject: a })).then(i => i ? { value: i, done: !1 } : { value: void 0, done: !0 }), return: async () => (this.abort(), { value: void 0, done: !0 }) } } static fromReadableStream(e) { const t = new K; return t._run(() => t._fromReadableStream(e)), t } async _fromReadableStream(e, t) { var i; const n = t == null ? void 0 : t.signal; n && (n.aborted && this.controller.abort(), n.addEventListener("abort", () => this.controller.abort())), this._connected(); const s = ne.fromReadableStream(e, this.controller); for await (const a of s) y(this, D, "m", Me).call(this, a); if ((i = s.controller.signal) != null && i.aborted) throw new G; return this._addRun(y(this, D, "m", Fe).call(this)) } toReadableStream() { return new ne(this[Symbol.asyncIterator].bind(this), this.controller).toReadableStream() } static createToolAssistantStream(e, t, n, s, i) { const a = new K; return a._run(() => a._runToolAssistantStream(e, t, n, s, { ...i, headers: { ...i == null ? void 0 : i.headers, "X-Stainless-Helper-Method": "stream" } })), a } async _createToolAssistantStream(e, t, n, s, i) { var u; const a = i == null ? void 0 : i.signal; a && (a.aborted && this.controller.abort(), a.addEventListener("abort", () => this.controller.abort())); const o = { ...s, stream: !0 }, l = await e.submitToolOutputs(t, n, o, { ...i, signal: this.controller.signal }); this._connected(); for await (const f of l) y(this, D, "m", Me).call(this, f); if ((u = l.controller.signal) != null && u.aborted) throw new G; return this._addRun(y(this, D, "m", Fe).call(this)) } static createThreadAssistantStream(e, t, n) { const s = new K; return s._run(() => s._threadAssistantStream(e, t, { ...n, headers: { ...n == null ? void 0 : n.headers, "X-Stainless-Helper-Method": "stream" } })), s } static createAssistantStream(e, t, n, s) { const i = new K; return i._run(() => i._runAssistantStream(e, t, n, { ...s, headers: { ...s == null ? void 0 : s.headers, "X-Stainless-Helper-Method": "stream" } })), i } currentEvent() { return y(this, lt, "f") } currentRun() { return y(this, ct, "f") } currentMessageSnapshot() { return y(this, Q, "f") } currentRunStepSnapshot() { return y(this, Le, "f") } async finalRunSteps() { return await this.done(), Object.values(y(this, te, "f")) } async finalMessages() { return await this.done(), Object.values(y(this, ot, "f")) } async finalRun() { if (await this.done(), !y(this, ue, "f")) throw Error("Final run was not received."); return y(this, ue, "f") } async _createThreadAssistantStream(e, t, n) { var o; const s = n == null ? void 0 : n.signal; s && (s.aborted && this.controller.abort(), s.addEventListener("abort", () => this.controller.abort())); const i = { ...t, stream: !0 }, a = await e.createAndRun(i, { ...n, signal: this.controller.signal }); this._connected(); for await (const l of a) y(this, D, "m", Me).call(this, l); if ((o = a.controller.signal) != null && o.aborted) throw new G; return this._addRun(y(this, D, "m", Fe).call(this)) } async _createAssistantStream(e, t, n, s) { var l; const i = s == null ? void 0 : s.signal; i && (i.aborted && this.controller.abort(), i.addEventListener("abort", () => this.controller.abort())); const a = { ...n, stream: !0 }, o = await e.create(t, a, { ...s, signal: this.controller.signal }); this._connected(); for await (const u of o) y(this, D, "m", Me).call(this, u); if ((l = o.controller.signal) != null && l.aborted) throw new G; return this._addRun(y(this, D, "m", Fe).call(this)) } static accumulateDelta(e, t) { for (const [n, s] of Object.entries(t)) { if (!e.hasOwnProperty(n)) { e[n] = s; continue } let i = e[n]; if (i == null) { e[n] = s; continue } if (n === "index" || n === "type") { e[n] = s; continue } if (typeof i == "string" && typeof s == "string") i += s; else if (typeof i == "number" && typeof s == "number") i += s; else if (vt(i) && vt(s)) i = this.accumulateDelta(i, s); else if (Array.isArray(i) && Array.isArray(s)) { if (i.every(a => typeof a == "string" || typeof a == "number")) { i.push(...s); continue } for (const a of s) { if (!vt(a)) throw new Error(`Expected array delta entry to be an object but got: ${a}`); const o = a.index; if (o == null) throw console.error(a), new Error("Expected array delta entry to have an `index` property"); if (typeof o != "number") throw new Error(`Expected array delta entry \`index\` property to be a number but got ${o}`); const l = i[o]; l == null ? i.push(a) : i[o] = this.accumulateDelta(l, a) } continue } else throw Error(`Unhandled record type: ${n}, deltaValue: ${s}, accValue: ${i}`); e[n] = i } return e } _addRun(e) { return e } async _threadAssistantStream(e, t, n) { return await this._createThreadAssistantStream(t, e, n) } async _runAssistantStream(e, t, n, s) { return await this._createAssistantStream(t, e, n, s) } async _runToolAssistantStream(e, t, n, s, i) { return await this._createToolAssistantStream(n, e, t, s, i) } } Me = function (e) { if (!this.ended) switch (j(this, lt, e, "f"), y(this, D, "m", Hn).call(this, e), e.event) { case "thread.created": break; case "thread.run.created": case "thread.run.queued": case "thread.run.in_progress": case "thread.run.requires_action": case "thread.run.completed": case "thread.run.failed": case "thread.run.cancelling": case "thread.run.cancelled": case "thread.run.expired": y(this, D, "m", Qn).call(this, e); break; case "thread.run.step.created": case "thread.run.step.in_progress": case "thread.run.step.delta": case "thread.run.step.completed": case "thread.run.step.failed": case "thread.run.step.cancelled": case "thread.run.step.expired": y(this, D, "m", jn).call(this, e); break; case "thread.message.created": case "thread.message.in_progress": case "thread.message.delta": case "thread.message.completed": case "thread.message.incomplete": y(this, D, "m", Wn).call(this, e); break; case "error": throw new Error("Encountered an error event in event processing - errors should be processed earlier") } }, Fe = function () { if (this.ended) throw new b("stream has ended, this shouldn't happen"); if (!y(this, ue, "f")) throw Error("Final run has not been received"); return y(this, ue, "f") }, Wn = function (e) { const [t, n] = y(this, D, "m", Xn).call(this, e, y(this, Q, "f")); j(this, Q, t, "f"), y(this, ot, "f")[t.id] = t; for (const s of n) { const i = t.content[s.index]; (i == null ? void 0 : i.type) == "text" && this._emit("textCreated", i.text) } switch (e.event) { case "thread.message.created": this._emit("messageCreated", e.data); break; case "thread.message.in_progress": break; case "thread.message.delta": if (this._emit("messageDelta", e.data.delta, t), e.data.delta.content) for (const s of e.data.delta.content) { if (s.type == "text" && s.text) { let i = s.text, a = t.content[s.index]; if (a && a.type == "text") this._emit("textDelta", i, a.text); else throw Error("The snapshot associated with this text delta is not text or missing") } if (s.index != y(this, be, "f")) { if (y(this, ce, "f")) switch (y(this, ce, "f").type) { case "text": this._emit("textDone", y(this, ce, "f").text, y(this, Q, "f")); break; case "image_file": this._emit("imageFileDone", y(this, ce, "f").image_file, y(this, Q, "f")); break }j(this, be, s.index, "f") } j(this, ce, t.content[s.index], "f") } break; case "thread.message.completed": case "thread.message.incomplete": if (y(this, be, "f") !== void 0) { const s = e.data.content[y(this, be, "f")]; if (s) switch (s.type) { case "image_file": this._emit("imageFileDone", s.image_file, y(this, Q, "f")); break; case "text": this._emit("textDone", s.text, y(this, Q, "f")); break } } y(this, Q, "f") && this._emit("messageDone", e.data), j(this, Q, void 0, "f") } }, jn = function (e) { const t = y(this, D, "m", Jn).call(this, e); switch (j(this, Le, t, "f"), e.event) { case "thread.run.step.created": this._emit("runStepCreated", e.data); break; case "thread.run.step.delta": const n = e.data.delta; if (n.step_details && n.step_details.type == "tool_calls" && n.step_details.tool_calls && t.step_details.type == "tool_calls") for (const i of n.step_details.tool_calls) i.index == y(this, dt, "f") ? this._emit("toolCallDelta", i, t.step_details.tool_calls[i.index]) : (y(this, H, "f") && this._emit("toolCallDone", y(this, H, "f")), j(this, dt, i.index, "f"), j(this, H, t.step_details.tool_calls[i.index], "f"), y(this, H, "f") && this._emit("toolCallCreated", y(this, H, "f"))); this._emit("runStepDelta", e.data.delta, t); break; case "thread.run.step.completed": case "thread.run.step.failed": case "thread.run.step.cancelled": case "thread.run.step.expired": j(this, Le, void 0, "f"), e.data.step_details.type == "tool_calls" && y(this, H, "f") && (this._emit("toolCallDone", y(this, H, "f")), j(this, H, void 0, "f")), this._emit("runStepDone", e.data, t); break } }, Hn = function (e) { y(this, Ht, "f").push(e), this._emit("event", e) }, Jn = function (e) { switch (e.event) { case "thread.run.step.created": return y(this, te, "f")[e.data.id] = e.data, e.data; case "thread.run.step.delta": let t = y(this, te, "f")[e.data.id]; if (!t) throw Error("Received a RunStepDelta before creation of a snapshot"); let n = e.data; if (n.delta) { const s = K.accumulateDelta(t, n.delta); y(this, te, "f")[e.data.id] = s } return y(this, te, "f")[e.data.id]; case "thread.run.step.completed": case "thread.run.step.failed": case "thread.run.step.cancelled": case "thread.run.step.expired": case "thread.run.step.in_progress": y(this, te, "f")[e.data.id] = e.data; break }if (y(this, te, "f")[e.data.id]) return y(this, te, "f")[e.data.id]; throw new Error("No snapshot available") }, Xn = function (e, t) { let n = []; switch (e.event) { case "thread.message.created": return [e.data, n]; case "thread.message.delta": if (!t) throw Error("Received a delta with no existing snapshot (there should be one from message creation)"); let s = e.data; if (s.delta.content) for (const i of s.delta.content) if (i.index in t.content) { let a = t.content[i.index]; t.content[i.index] = y(this, D, "m", Vn).call(this, i, a) } else t.content[i.index] = i, n.push(i); return [t, n]; case "thread.message.in_progress": case "thread.message.completed": case "thread.message.incomplete": if (t) return [t, n]; throw Error("Received thread message event with no existing snapshot") }throw Error("Tried to accumulate a non-message event") }, Vn = function (e, t) { return K.accumulateDelta(t, e) }, Qn = function (e) { switch (j(this, ct, e.data, "f"), e.event) { case "thread.run.created": break; case "thread.run.queued": break; case "thread.run.in_progress": break; case "thread.run.requires_action": case "thread.run.cancelled": case "thread.run.failed": case "thread.run.completed": case "thread.run.expired": j(this, ue, e.data, "f"), y(this, H, "f") && (this._emit("toolCallDone", y(this, H, "f")), j(this, H, void 0, "f")); break } }; class sn extends A { create(e, t, n) { return this._client.post(`/threads/${e}/messages`, { body: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } retrieve(e, t, n) { return this._client.get(`/threads/${e}/messages/${t}`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } update(e, t, n, s) { return this._client.post(`/threads/${e}/messages/${t}`, { body: n, ...s, headers: { "OpenAI-Beta": "assistants=v2", ...s == null ? void 0 : s.headers } }) } list(e, t = {}, n) { return W(t) ? this.list(e, {}, t) : this._client.getAPIList(`/threads/${e}/messages`, rn, { query: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } del(e, t, n) { return this._client.delete(`/threads/${e}/messages/${t}`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } } class rn extends Z { } sn.MessagesPage = rn; class an extends A { retrieve(e, t, n, s = {}, i) { return W(s) ? this.retrieve(e, t, n, {}, s) : this._client.get(`/threads/${e}/runs/${t}/steps/${n}`, { query: s, ...i, headers: { "OpenAI-Beta": "assistants=v2", ...i == null ? void 0 : i.headers } }) } list(e, t, n = {}, s) { return W(n) ? this.list(e, t, {}, n) : this._client.getAPIList(`/threads/${e}/runs/${t}/steps`, on, { query: n, ...s, headers: { "OpenAI-Beta": "assistants=v2", ...s == null ? void 0 : s.headers } }) } } class on extends Z { } an.RunStepsPage = on; class He extends A { constructor() { super(...arguments), this.steps = new an(this._client) } create(e, t, n) { const { include: s, ...i } = t; return this._client.post(`/threads/${e}/runs`, { query: { include: s }, body: i, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers }, stream: t.stream ?? !1 }) } retrieve(e, t, n) { return this._client.get(`/threads/${e}/runs/${t}`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } update(e, t, n, s) { return this._client.post(`/threads/${e}/runs/${t}`, { body: n, ...s, headers: { "OpenAI-Beta": "assistants=v2", ...s == null ? void 0 : s.headers } }) } list(e, t = {}, n) { return W(t) ? this.list(e, {}, t) : this._client.getAPIList(`/threads/${e}/runs`, ln, { query: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } cancel(e, t, n) { return this._client.post(`/threads/${e}/runs/${t}/cancel`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } async createAndPoll(e, t, n) { const s = await this.create(e, t, n); return await this.poll(e, s.id, n) } createAndStream(e, t, n) { return K.createAssistantStream(e, this._client.beta.threads.runs, t, n) } async poll(e, t, n) { const s = { ...n == null ? void 0 : n.headers, "X-Stainless-Poll-Helper": "true" }; for (n != null && n.pollIntervalMs && (s["X-Stainless-Custom-Poll-Interval"] = n.pollIntervalMs.toString()); ;) { const { data: i, response: a } = await this.retrieve(e, t, { ...n, headers: { ...n == null ? void 0 : n.headers, ...s } }).withResponse(); switch (i.status) { case "queued": case "in_progress": case "cancelling": let o = 5e3; if (n != null && n.pollIntervalMs) o = n.pollIntervalMs; else { const l = a.headers.get("openai-poll-after-ms"); if (l) { const u = parseInt(l); isNaN(u) || (o = u) } } await qe(o); break; case "requires_action": case "incomplete": case "cancelled": case "completed": case "failed": case "expired": return i } } } stream(e, t, n) { return K.createAssistantStream(e, this._client.beta.threads.runs, t, n) } submitToolOutputs(e, t, n, s) { return this._client.post(`/threads/${e}/runs/${t}/submit_tool_outputs`, { body: n, ...s, headers: { "OpenAI-Beta": "assistants=v2", ...s == null ? void 0 : s.headers }, stream: n.stream ?? !1 }) } async submitToolOutputsAndPoll(e, t, n, s) { const i = await this.submitToolOutputs(e, t, n, s); return await this.poll(e, i.id, s) } submitToolOutputsStream(e, t, n, s) { return K.createToolAssistantStream(e, t, this._client.beta.threads.runs, n, s) } } class ln extends Z { } He.RunsPage = ln; He.Steps = an; He.RunStepsPage = on; class Re extends A { constructor() { super(...arguments), this.runs = new He(this._client), this.messages = new sn(this._client) } create(e = {}, t) { return W(e) ? this.create({}, e) : this._client.post("/threads", { body: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } retrieve(e, t) { return this._client.get(`/threads/${e}`, { ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } update(e, t, n) { return this._client.post(`/threads/${e}`, { body: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } del(e, t) { return this._client.delete(`/threads/${e}`, { ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } createAndRun(e, t) { return this._client.post("/threads/runs", { body: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers }, stream: e.stream ?? !1 }) } async createAndRunPoll(e, t) { const n = await this.createAndRun(e, t); return await this.runs.poll(n.thread_id, n.id, t) } createAndRunStream(e, t) { return K.createThreadAssistantStream(e, this._client.beta.threads, t) } } Re.Runs = He; Re.RunsPage = ln; Re.Messages = sn; Re.MessagesPage = rn; const Ci = async r => { const e = await Promise.allSettled(r), t = e.filter(s => s.status === "rejected"); if (t.length) { for (const s of t) console.error(s.reason); throw new Error(`${t.length} promise(s) failed - see the above errors`) } const n = []; for (const s of e) s.status === "fulfilled" && n.push(s.value); return n }; let cn = class extends A { create(e, t, n) { return this._client.post(`/vector_stores/${e}/files`, { body: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } retrieve(e, t, n) { return this._client.get(`/vector_stores/${e}/files/${t}`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } list(e, t = {}, n) { return W(t) ? this.list(e, {}, t) : this._client.getAPIList(`/vector_stores/${e}/files`, bt, { query: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } del(e, t, n) { return this._client.delete(`/vector_stores/${e}/files/${t}`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } async createAndPoll(e, t, n) { const s = await this.create(e, t, n); return await this.poll(e, s.id, n) } async poll(e, t, n) { const s = { ...n == null ? void 0 : n.headers, "X-Stainless-Poll-Helper": "true" }; for (n != null && n.pollIntervalMs && (s["X-Stainless-Custom-Poll-Interval"] = n.pollIntervalMs.toString()); ;) { const i = await this.retrieve(e, t, { ...n, headers: s }).withResponse(), a = i.data; switch (a.status) { case "in_progress": let o = 5e3; if (n != null && n.pollIntervalMs) o = n.pollIntervalMs; else { const l = i.response.headers.get("openai-poll-after-ms"); if (l) { const u = parseInt(l); isNaN(u) || (o = u) } } await qe(o); break; case "failed": case "completed": return a } } } async upload(e, t, n) { const s = await this._client.files.create({ file: t, purpose: "assistants" }, n); return this.create(e, { file_id: s.id }, n) } async uploadAndPoll(e, t, n) { const s = await this.upload(e, t, n); return await this.poll(e, s.id, n) } }; class bt extends Z { } cn.VectorStoreFilesPage = bt; class rr extends A { create(e, t, n) { return this._client.post(`/vector_stores/${e}/file_batches`, { body: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } retrieve(e, t, n) { return this._client.get(`/vector_stores/${e}/file_batches/${t}`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } cancel(e, t, n) { return this._client.post(`/vector_stores/${e}/file_batches/${t}/cancel`, { ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } async createAndPoll(e, t, n) { const s = await this.create(e, t); return await this.poll(e, s.id, n) } listFiles(e, t, n = {}, s) { return W(n) ? this.listFiles(e, t, {}, n) : this._client.getAPIList(`/vector_stores/${e}/file_batches/${t}/files`, bt, { query: n, ...s, headers: { "OpenAI-Beta": "assistants=v2", ...s == null ? void 0 : s.headers } }) } async poll(e, t, n) { const s = { ...n == null ? void 0 : n.headers, "X-Stainless-Poll-Helper": "true" }; for (n != null && n.pollIntervalMs && (s["X-Stainless-Custom-Poll-Interval"] = n.pollIntervalMs.toString()); ;) { const { data: i, response: a } = await this.retrieve(e, t, { ...n, headers: s }).withResponse(); switch (i.status) { case "in_progress": let o = 5e3; if (n != null && n.pollIntervalMs) o = n.pollIntervalMs; else { const l = a.headers.get("openai-poll-after-ms"); if (l) { const u = parseInt(l); isNaN(u) || (o = u) } } await qe(o); break; case "failed": case "cancelled": case "completed": return i } } } async uploadAndPoll(e, { files: t, fileIds: n = [] }, s) { if (t == null || t.length == 0) throw new Error("No `files` provided to process. If you've already uploaded files you should use `.createAndPoll()` instead"); const i = (s == null ? void 0 : s.maxConcurrency) ?? 5, a = Math.min(i, t.length), o = this._client, l = t.values(), u = [...n]; async function f(h) { for (let d of h) { const w = await o.files.create({ file: d, purpose: "assistants" }, s); u.push(w.id) } } const c = Array(a).fill(l).map(f); return await Ci(c), await this.createAndPoll(e, { file_ids: u }) } } class ve extends A { constructor() { super(...arguments), this.files = new cn(this._client), this.fileBatches = new rr(this._client) } create(e, t) { return this._client.post("/vector_stores", { body: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } retrieve(e, t) { return this._client.get(`/vector_stores/${e}`, { ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } update(e, t, n) { return this._client.post(`/vector_stores/${e}`, { body: t, ...n, headers: { "OpenAI-Beta": "assistants=v2", ...n == null ? void 0 : n.headers } }) } list(e = {}, t) { return W(e) ? this.list({}, e) : this._client.getAPIList("/vector_stores", un, { query: e, ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } del(e, t) { return this._client.delete(`/vector_stores/${e}`, { ...t, headers: { "OpenAI-Beta": "assistants=v2", ...t == null ? void 0 : t.headers } }) } } class un extends Z { } ve.VectorStoresPage = un; ve.Files = cn; ve.VectorStoreFilesPage = bt; ve.FileBatches = rr; class le extends A { constructor() { super(...arguments), this.realtime = new nn(this._client), this.vectorStores = new ve(this._client), this.chat = new nr(this._client), this.assistants = new Yt(this._client), this.threads = new Re(this._client) } } le.Realtime = nn; le.VectorStores = ve; le.VectorStoresPage = un; le.Assistants = Yt; le.AssistantsPage = en; le.Threads = Re; class ir extends A { create(e, t) { return this._client.post("/completions", { body: e, ...t, stream: e.stream ?? !1 }) } } class ar extends A { create(e, t) { return this._client.post("/embeddings", { body: e, ...t }) } } class hn extends A { create(e, t) { return this._client.post("/files", Ce({ body: e, ...t })) } retrieve(e, t) { return this._client.get(`/files/${e}`, t) } list(e = {}, t) { return W(e) ? this.list({}, e) : this._client.getAPIList("/files", fn, { query: e, ...t }) } del(e, t) { return this._client.delete(`/files/${e}`, t) } content(e, t) { return this._client.get(`/files/${e}/content`, { ...t, headers: { Accept: "application/binary", ...t == null ? void 0 : t.headers }, __binaryResponse: !0 }) } retrieveContent(e, t) { return this._client.get(`/files/${e}/content`, t) } async waitForProcessing(e, { pollInterval: t = 5e3, maxWait: n = 30 * 60 * 1e3 } = {}) { const s = new Set(["processed", "error", "deleted"]), i = Date.now(); let a = await this.retrieve(e); for (; !a.status || !s.has(a.status);)if (await qe(t), a = await this.retrieve(e), Date.now() - i > n) throw new Qt({ message: `Giving up on waiting for file ${e} to finish processing after ${n} milliseconds.` }); return a } } class fn extends Z { } hn.FileObjectsPage = fn; class dn extends A { list(e, t = {}, n) { return W(t) ? this.list(e, {}, t) : this._client.getAPIList(`/fine_tuning/jobs/${e}/checkpoints`, mn, { query: t, ...n }) } } class mn extends Z { } dn.FineTuningJobCheckpointsPage = mn; class Ee extends A { constructor() { super(...arguments), this.checkpoints = new dn(this._client) } create(e, t) { return this._client.post("/fine_tuning/jobs", { body: e, ...t }) } retrieve(e, t) { return this._client.get(`/fine_tuning/jobs/${e}`, t) } list(e = {}, t) { return W(e) ? this.list({}, e) : this._client.getAPIList("/fine_tuning/jobs", pn, { query: e, ...t }) } cancel(e, t) { return this._client.post(`/fine_tuning/jobs/${e}/cancel`, t) } listEvents(e, t = {}, n) { return W(t) ? this.listEvents(e, {}, t) : this._client.getAPIList(`/fine_tuning/jobs/${e}/events`, gn, { query: t, ...n }) } } class pn extends Z { } class gn extends Z { } Ee.FineTuningJobsPage = pn; Ee.FineTuningJobEventsPage = gn; Ee.Checkpoints = dn; Ee.FineTuningJobCheckpointsPage = mn; class Je extends A { constructor() { super(...arguments), this.jobs = new Ee(this._client) } } Je.Jobs = Ee; Je.FineTuningJobsPage = pn; Je.FineTuningJobEventsPage = gn; class or extends A { createVariation(e, t) { return this._client.post("/images/variations", Ce({ body: e, ...t })) } edit(e, t) { return this._client.post("/images/edits", Ce({ body: e, ...t })) } generate(e, t) { return this._client.post("/images/generations", { body: e, ...t }) } } class yn extends A { retrieve(e, t) { return this._client.get(`/models/${e}`, t) } list(e) { return this._client.getAPIList("/models", wn, e) } del(e, t) { return this._client.delete(`/models/${e}`, t) } } class wn extends di { } yn.ModelsPage = wn; class lr extends A { create(e, t) { return this._client.post("/moderations", { body: e, ...t }) } } class cr extends A { create(e, t, n) { return this._client.post(`/uploads/${e}/parts`, Ce({ body: t, ...n })) } } class _n extends A { constructor() { super(...arguments), this.parts = new cr(this._client) } create(e, t) { return this._client.post("/uploads", { body: e, ...t }) } cancel(e, t) { return this._client.post(`/uploads/${e}/cancel`, t) } complete(e, t, n) { return this._client.post(`/uploads/${e}/complete`, { body: t, ...n }) } } _n.Parts = cr; var ur; class S extends ei {
  constructor({ baseURL: e = Ke("OPENAI_BASE_URL"), apiKey: t = Ke("OPENAI_API_KEY"), organization: n = Ke("OPENAI_ORG_ID") ?? null, project: s = Ke("OPENAI_PROJECT_ID") ?? null, ...i } = {}) {
    if (t === void 0) throw new b("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' })."); const a = { apiKey: t, organization: n, project: s, ...i, baseURL: e || "https://api.openai.com/v1" }; if (!a.dangerouslyAllowBrowser && hi()) throw new b(`It looks like you're running in a browser-like environment.

This is disabled by default, as it risks exposing your secret API credentials to attackers.
If you understand the risks and have appropriate mitigations in place,
you can set the \`dangerouslyAllowBrowser\` option to \`true\`, e.g.,

new OpenAI({ apiKey, dangerouslyAllowBrowser: true });

https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
`); super({ baseURL: a.baseURL, timeout: a.timeout ?? 6e5, httpAgent: a.httpAgent, maxRetries: a.maxRetries, fetch: a.fetch }), this.completions = new ir(this), this.chat = new Gt(this), this.embeddings = new ar(this), this.files = new hn(this), this.images = new or(this), this.audio = new We(this), this.moderations = new lr(this), this.models = new yn(this), this.fineTuning = new Je(this), this.beta = new le(this), this.batches = new Kt(this), this.uploads = new _n(this), this._options = a, this.apiKey = t, this.organization = n, this.project = s
  } defaultQuery() { return this._options.defaultQuery } defaultHeaders(e) { return { ...super.defaultHeaders(e), "OpenAI-Organization": this.organization, "OpenAI-Project": this.project, ...this._options.defaultHeaders } } authHeaders(e) { return { Authorization: `Bearer ${this.apiKey}` } } stringifyQuery(e) { return Lr(e, { arrayFormat: "brackets" }) }
} ur = S; S.OpenAI = ur; S.DEFAULT_TIMEOUT = 6e5; S.OpenAIError = b; S.APIError = z; S.APIConnectionError = yt; S.APIConnectionTimeoutError = Qt; S.APIUserAbortError = G; S.NotFoundError = ms; S.ConflictError = ps; S.RateLimitError = ys; S.BadRequestError = hs; S.AuthenticationError = fs; S.InternalServerError = ws; S.PermissionDeniedError = ds; S.UnprocessableEntityError = gs; S.toFile = As; S.fileFromPath = cs; S.Completions = ir; S.Chat = Gt; S.Embeddings = ar; S.Files = hn; S.FileObjectsPage = fn; S.Images = or; S.Audio = We; S.Moderations = lr; S.Models = yn; S.ModelsPage = wn; S.FineTuning = Je; S.Beta = le; S.Batches = Kt; S.BatchesPage = Zt; S.Uploads = _n; function bn() { return { async: !1, breaks: !1, extensions: null, gfm: !0, hooks: null, pedantic: !1, renderer: null, silent: !1, tokenizer: null, walkTokens: null } } let me = bn(); function hr(r) { me = r } const fr = /[&<>"']/, Ri = new RegExp(fr.source, "g"), dr = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/, vi = new RegExp(dr.source, "g"), Ei = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }, Gn = r => Ei[r]; function J(r, e) { if (e) { if (fr.test(r)) return r.replace(Ri, Gn) } else if (dr.test(r)) return r.replace(vi, Gn); return r } const $i = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig; function Pi(r) { return r.replace($i, (e, t) => (t = t.toLowerCase(), t === "colon" ? ":" : t.charAt(0) === "#" ? t.charAt(1) === "x" ? String.fromCharCode(parseInt(t.substring(2), 16)) : String.fromCharCode(+t.substring(1)) : "")) } const Ii = /(^|[^\[])\^/g; function E(r, e) { let t = typeof r == "string" ? r : r.source; e = e || ""; const n = { replace: (s, i) => { let a = typeof i == "string" ? i : i.source; return a = a.replace(Ii, "$1"), t = t.replace(s, a), n }, getRegex: () => new RegExp(t, e) }; return n } function Kn(r) { try { r = encodeURI(r).replace(/%25/g, "%") } catch { return null } return r } const Be = { exec: () => null }; function Zn(r, e) { const t = r.replace(/\|/g, (i, a, o) => { let l = !1, u = a; for (; --u >= 0 && o[u] === "\\";)l = !l; return l ? "|" : " |" }), n = t.split(/ \|/); let s = 0; if (n[0].trim() || n.shift(), n.length > 0 && !n[n.length - 1].trim() && n.pop(), e) if (n.length > e) n.splice(e); else for (; n.length < e;)n.push(""); for (; s < n.length; s++)n[s] = n[s].trim().replace(/\\\|/g, "|"); return n } function tt(r, e, t) { const n = r.length; if (n === 0) return ""; let s = 0; for (; s < n && r.charAt(n - s - 1) === e;)s++; return r.slice(0, n - s) } function Ti(r, e) { if (r.indexOf(e[1]) === -1) return -1; let t = 0; for (let n = 0; n < r.length; n++)if (r[n] === "\\") n++; else if (r[n] === e[0]) t++; else if (r[n] === e[1] && (t--, t < 0)) return n; return -1 } function Yn(r, e, t, n) { const s = e.href, i = e.title ? J(e.title) : null, a = r[1].replace(/\\([\[\]])/g, "$1"); if (r[0].charAt(0) !== "!") { n.state.inLink = !0; const o = { type: "link", raw: t, href: s, title: i, text: a, tokens: n.inlineTokens(a) }; return n.state.inLink = !1, o } return { type: "image", raw: t, href: s, title: i, text: J(a) } } function Oi(r, e) {
  const t = r.match(/^(\s+)(?:```)/); if (t === null) return e; const n = t[1]; return e.split(`
`).map(s => { const i = s.match(/^\s+/); if (i === null) return s; const [a] = i; return a.length >= n.length ? s.slice(n.length) : s }).join(`
`)
} class mt {
  constructor(e) { P(this, "options"); P(this, "rules"); P(this, "lexer"); this.options = e || me } space(e) { const t = this.rules.block.newline.exec(e); if (t && t[0].length > 0) return { type: "space", raw: t[0] } } code(e) {
    const t = this.rules.block.code.exec(e); if (t) {
      const n = t[0].replace(/^ {1,4}/gm, ""); return {
        type: "code", raw: t[0], codeBlockStyle: "indented", text: this.options.pedantic ? n : tt(n, `
`)
      }
    }
  } fences(e) { const t = this.rules.block.fences.exec(e); if (t) { const n = t[0], s = Oi(n, t[3] || ""); return { type: "code", raw: n, lang: t[2] ? t[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : t[2], text: s } } } heading(e) { const t = this.rules.block.heading.exec(e); if (t) { let n = t[2].trim(); if (/#$/.test(n)) { const s = tt(n, "#"); (this.options.pedantic || !s || / $/.test(s)) && (n = s.trim()) } return { type: "heading", raw: t[0], depth: t[1].length, text: n, tokens: this.lexer.inline(n) } } } hr(e) { const t = this.rules.block.hr.exec(e); if (t) return { type: "hr", raw: t[0] } } blockquote(e) {
    const t = this.rules.block.blockquote.exec(e); if (t) {
      let n = t[0].replace(/\n {0,3}((?:=+|-+) *)(?=\n|$)/g, `
    $1`); n = tt(n.replace(/^ *>[ \t]?/gm, ""), `
`); const s = this.lexer.state.top; this.lexer.state.top = !0; const i = this.lexer.blockTokens(n); return this.lexer.state.top = s, { type: "blockquote", raw: t[0], tokens: i, text: n }
    }
  } list(e) {
    let t = this.rules.block.list.exec(e); if (t) {
      let n = t[1].trim(); const s = n.length > 1, i = { type: "list", raw: "", ordered: s, start: s ? +n.slice(0, -1) : "", loose: !1, items: [] }; n = s ? `\\d{1,9}\\${n.slice(-1)}` : `\\${n}`, this.options.pedantic && (n = s ? n : "[*+-]"); const a = new RegExp(`^( {0,3}${n})((?:[	 ][^\\n]*)?(?:\\n|$))`); let o = "", l = "", u = !1; for (; e;) {
        let f = !1; if (!(t = a.exec(e)) || this.rules.block.hr.test(e)) break; o = t[0], e = e.substring(o.length); let c = t[2].split(`
`, 1)[0].replace(/^\t+/, M => " ".repeat(3 * M.length)), h = e.split(`
`, 1)[0], d = 0; this.options.pedantic ? (d = 2, l = c.trimStart()) : (d = t[2].search(/[^ ]/), d = d > 4 ? 1 : d, l = c.slice(d), d += t[1].length); let w = !1; if (!c && /^ *$/.test(h) && (o += h + `
`, e = e.substring(h.length + 1), f = !0), !f) {
          const M = new RegExp(`^ {0,${Math.min(3, d - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`), p = new RegExp(`^ {0,${Math.min(3, d - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`), k = new RegExp(`^ {0,${Math.min(3, d - 1)}}(?:\`\`\`|~~~)`), _ = new RegExp(`^ {0,${Math.min(3, d - 1)}}#`); for (; e;) {
            const I = e.split(`
`, 1)[0]; if (h = I, this.options.pedantic && (h = h.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ")), k.test(h) || _.test(h) || M.test(h) || p.test(e)) break; if (h.search(/[^ ]/) >= d || !h.trim()) l += `
`+ h.slice(d); else {
              if (w || c.search(/[^ ]/) >= 4 || k.test(c) || _.test(c) || p.test(c)) break; l += `
`+ h
            } !w && !h.trim() && (w = !0), o += I + `
`, e = e.substring(I.length + 1), c = h.slice(d)
          }
        } i.loose || (u ? i.loose = !0 : /\n *\n *$/.test(o) && (u = !0)); let m = null, g; this.options.gfm && (m = /^\[[ xX]\] /.exec(l), m && (g = m[0] !== "[ ] ", l = l.replace(/^\[[ xX]\] +/, ""))), i.items.push({ type: "list_item", raw: o, task: !!m, checked: g, loose: !1, text: l, tokens: [] }), i.raw += o
      } i.items[i.items.length - 1].raw = o.trimEnd(), i.items[i.items.length - 1].text = l.trimEnd(), i.raw = i.raw.trimEnd(); for (let f = 0; f < i.items.length; f++)if (this.lexer.state.top = !1, i.items[f].tokens = this.lexer.blockTokens(i.items[f].text, []), !i.loose) { const c = i.items[f].tokens.filter(d => d.type === "space"), h = c.length > 0 && c.some(d => /\n.*\n/.test(d.raw)); i.loose = h } if (i.loose) for (let f = 0; f < i.items.length; f++)i.items[f].loose = !0; return i
    }
  } html(e) { const t = this.rules.block.html.exec(e); if (t) return { type: "html", block: !0, raw: t[0], pre: t[1] === "pre" || t[1] === "script" || t[1] === "style", text: t[0] } } def(e) { const t = this.rules.block.def.exec(e); if (t) { const n = t[1].toLowerCase().replace(/\s+/g, " "), s = t[2] ? t[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "", i = t[3] ? t[3].substring(1, t[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : t[3]; return { type: "def", tag: n, raw: t[0], href: s, title: i } } } table(e) {
    const t = this.rules.block.table.exec(e); if (!t || !/[:|]/.test(t[2])) return; const n = Zn(t[1]), s = t[2].replace(/^\||\| *$/g, "").split("|"), i = t[3] && t[3].trim() ? t[3].replace(/\n[ \t]*$/, "").split(`
`) : [], a = { type: "table", raw: t[0], header: [], align: [], rows: [] }; if (n.length === s.length) { for (const o of s) /^ *-+: *$/.test(o) ? a.align.push("right") : /^ *:-+: *$/.test(o) ? a.align.push("center") : /^ *:-+ *$/.test(o) ? a.align.push("left") : a.align.push(null); for (const o of n) a.header.push({ text: o, tokens: this.lexer.inline(o) }); for (const o of i) a.rows.push(Zn(o, a.header.length).map(l => ({ text: l, tokens: this.lexer.inline(l) }))); return a }
  } lheading(e) { const t = this.rules.block.lheading.exec(e); if (t) return { type: "heading", raw: t[0], depth: t[2].charAt(0) === "=" ? 1 : 2, text: t[1], tokens: this.lexer.inline(t[1]) } } paragraph(e) {
    const t = this.rules.block.paragraph.exec(e); if (t) {
      const n = t[1].charAt(t[1].length - 1) === `
`? t[1].slice(0, -1) : t[1]; return { type: "paragraph", raw: t[0], text: n, tokens: this.lexer.inline(n) }
    }
  } text(e) { const t = this.rules.block.text.exec(e); if (t) return { type: "text", raw: t[0], text: t[0], tokens: this.lexer.inline(t[0]) } } escape(e) { const t = this.rules.inline.escape.exec(e); if (t) return { type: "escape", raw: t[0], text: J(t[1]) } } tag(e) { const t = this.rules.inline.tag.exec(e); if (t) return !this.lexer.state.inLink && /^<a /i.test(t[0]) ? this.lexer.state.inLink = !0 : this.lexer.state.inLink && /^<\/a>/i.test(t[0]) && (this.lexer.state.inLink = !1), !this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(t[0]) ? this.lexer.state.inRawBlock = !0 : this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(t[0]) && (this.lexer.state.inRawBlock = !1), { type: "html", raw: t[0], inLink: this.lexer.state.inLink, inRawBlock: this.lexer.state.inRawBlock, block: !1, text: t[0] } } link(e) { const t = this.rules.inline.link.exec(e); if (t) { const n = t[2].trim(); if (!this.options.pedantic && /^</.test(n)) { if (!/>$/.test(n)) return; const a = tt(n.slice(0, -1), "\\"); if ((n.length - a.length) % 2 === 0) return } else { const a = Ti(t[2], "()"); if (a > -1) { const l = (t[0].indexOf("!") === 0 ? 5 : 4) + t[1].length + a; t[2] = t[2].substring(0, a), t[0] = t[0].substring(0, l).trim(), t[3] = "" } } let s = t[2], i = ""; if (this.options.pedantic) { const a = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(s); a && (s = a[1], i = a[3]) } else i = t[3] ? t[3].slice(1, -1) : ""; return s = s.trim(), /^</.test(s) && (this.options.pedantic && !/>$/.test(n) ? s = s.slice(1) : s = s.slice(1, -1)), Yn(t, { href: s && s.replace(this.rules.inline.anyPunctuation, "$1"), title: i && i.replace(this.rules.inline.anyPunctuation, "$1") }, t[0], this.lexer) } } reflink(e, t) { let n; if ((n = this.rules.inline.reflink.exec(e)) || (n = this.rules.inline.nolink.exec(e))) { const s = (n[2] || n[1]).replace(/\s+/g, " "), i = t[s.toLowerCase()]; if (!i) { const a = n[0].charAt(0); return { type: "text", raw: a, text: a } } return Yn(n, i, n[0], this.lexer) } } emStrong(e, t, n = "") { let s = this.rules.inline.emStrongLDelim.exec(e); if (!s || s[3] && n.match(/[\p{L}\p{N}]/u)) return; if (!(s[1] || s[2] || "") || !n || this.rules.inline.punctuation.exec(n)) { const a = [...s[0]].length - 1; let o, l, u = a, f = 0; const c = s[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd; for (c.lastIndex = 0, t = t.slice(-1 * e.length + a); (s = c.exec(t)) != null;) { if (o = s[1] || s[2] || s[3] || s[4] || s[5] || s[6], !o) continue; if (l = [...o].length, s[3] || s[4]) { u += l; continue } else if ((s[5] || s[6]) && a % 3 && !((a + l) % 3)) { f += l; continue } if (u -= l, u > 0) continue; l = Math.min(l, l + u + f); const h = [...s[0]][0].length, d = e.slice(0, a + s.index + h + l); if (Math.min(a, l) % 2) { const m = d.slice(1, -1); return { type: "em", raw: d, text: m, tokens: this.lexer.inlineTokens(m) } } const w = d.slice(2, -2); return { type: "strong", raw: d, text: w, tokens: this.lexer.inlineTokens(w) } } } } codespan(e) { const t = this.rules.inline.code.exec(e); if (t) { let n = t[2].replace(/\n/g, " "); const s = /[^ ]/.test(n), i = /^ /.test(n) && / $/.test(n); return s && i && (n = n.substring(1, n.length - 1)), n = J(n, !0), { type: "codespan", raw: t[0], text: n } } } br(e) { const t = this.rules.inline.br.exec(e); if (t) return { type: "br", raw: t[0] } } del(e) { const t = this.rules.inline.del.exec(e); if (t) return { type: "del", raw: t[0], text: t[2], tokens: this.lexer.inlineTokens(t[2]) } } autolink(e) { const t = this.rules.inline.autolink.exec(e); if (t) { let n, s; return t[2] === "@" ? (n = J(t[1]), s = "mailto:" + n) : (n = J(t[1]), s = n), { type: "link", raw: t[0], text: n, href: s, tokens: [{ type: "text", raw: n, text: n }] } } } url(e) { var n; let t; if (t = this.rules.inline.url.exec(e)) { let s, i; if (t[2] === "@") s = J(t[0]), i = "mailto:" + s; else { let a; do a = t[0], t[0] = ((n = this.rules.inline._backpedal.exec(t[0])) == null ? void 0 : n[0]) ?? ""; while (a !== t[0]); s = J(t[0]), t[1] === "www." ? i = "http://" + t[0] : i = t[0] } return { type: "link", raw: t[0], text: s, href: i, tokens: [{ type: "text", raw: s, text: s }] } } } inlineText(e) { const t = this.rules.inline.text.exec(e); if (t) { let n; return this.lexer.state.inRawBlock ? n = t[0] : n = J(t[0]), { type: "text", raw: t[0], text: n } } }
} const Mi = /^(?: *(?:\n|$))+/, Fi = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/, Ni = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/, Xe = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/, Li = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/, mr = /(?:[*+-]|\d{1,9}[.)])/, pr = E(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/).replace(/bull/g, mr).replace(/blockCode/g, / {4}/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).getRegex(), kn = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/, Bi = /^[^\n]+/, xn = /(?!\s*\])(?:\\.|[^\[\]\\])+/, Di = E(/^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/).replace("label", xn).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(), zi = E(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, mr).getRegex(), kt = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul", Sn = /<!--(?:-?>|[\s\S]*?(?:-->|$))/, Ui = E("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))", "i").replace("comment", Sn).replace("tag", kt).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(), gr = E(kn).replace("hr", Xe).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", kt).getRegex(), qi = E(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", gr).getRegex(), An = { blockquote: qi, code: Fi, def: Di, fences: Ni, heading: Li, hr: Xe, html: Ui, lheading: pr, list: zi, newline: Mi, paragraph: gr, table: Be, text: Bi }, es = E("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr", Xe).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", kt).getRegex(), Wi = { ...An, table: es, paragraph: E(kn).replace("hr", Xe).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", es).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", kt).getRegex() }, ji = {
  ...An, html: E(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", Sn).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(), def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/, heading: /^(#{1,6})(.*)(?:\n+|$)/, fences: Be, lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/, paragraph: E(kn).replace("hr", Xe).replace("heading", ` *#{1,6} *[^
]`).replace("lheading", pr).replace("|table", "").replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex()
}, yr = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/, Hi = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/, wr = /^( {2,}|\\)\n(?!\s*$)/, Ji = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/, Ve = "\\p{P}\\p{S}", Xi = E(/^((?![*_])[\spunctuation])/, "u").replace(/punctuation/g, Ve).getRegex(), Vi = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g, Qi = E(/^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/, "u").replace(/punct/g, Ve).getRegex(), Gi = E("^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])", "gu").replace(/punct/g, Ve).getRegex(), Ki = E("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])", "gu").replace(/punct/g, Ve).getRegex(), Zi = E(/\\([punct])/, "gu").replace(/punct/g, Ve).getRegex(), Yi = E(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(), ea = E(Sn).replace("(?:-->|$)", "-->").getRegex(), ta = E("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment", ea).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(), pt = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/, na = E(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label", pt).replace("href", /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(), _r = E(/^!?\[(label)\]\[(ref)\]/).replace("label", pt).replace("ref", xn).getRegex(), br = E(/^!?\[(ref)\](?:\[\])?/).replace("ref", xn).getRegex(), sa = E("reflink|nolink(?!\\()", "g").replace("reflink", _r).replace("nolink", br).getRegex(), Cn = { _backpedal: Be, anyPunctuation: Zi, autolink: Yi, blockSkip: Vi, br: wr, code: Hi, del: Be, emStrongLDelim: Qi, emStrongRDelimAst: Gi, emStrongRDelimUnd: Ki, escape: yr, link: na, nolink: br, punctuation: Xi, reflink: _r, reflinkSearch: sa, tag: ta, text: Ji, url: Be }, ra = { ...Cn, link: E(/^!?\[(label)\]\((.*?)\)/).replace("label", pt).getRegex(), reflink: E(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", pt).getRegex() }, Jt = { ...Cn, escape: E(yr).replace("])", "~|])").getRegex(), url: E(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, "i").replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(), _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/, del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/, text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/ }, ia = { ...Jt, br: E(wr).replace("{2,}", "*").getRegex(), text: E(Jt.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex() }, nt = { normal: An, gfm: Wi, pedantic: ji }, $e = { normal: Cn, gfm: Jt, breaks: ia, pedantic: ra }; class se {
  constructor(e) { P(this, "tokens"); P(this, "options"); P(this, "state"); P(this, "tokenizer"); P(this, "inlineQueue"); this.tokens = [], this.tokens.links = Object.create(null), this.options = e || me, this.options.tokenizer = this.options.tokenizer || new mt, this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = { inLink: !1, inRawBlock: !1, top: !0 }; const t = { block: nt.normal, inline: $e.normal }; this.options.pedantic ? (t.block = nt.pedantic, t.inline = $e.pedantic) : this.options.gfm && (t.block = nt.gfm, this.options.breaks ? t.inline = $e.breaks : t.inline = $e.gfm), this.tokenizer.rules = t } static get rules() { return { block: nt, inline: $e } } static lex(e, t) { return new se(t).lex(e) } static lexInline(e, t) { return new se(t).inlineTokens(e) } lex(e) {
    e = e.replace(/\r\n|\r/g, `
`), this.blockTokens(e, this.tokens); for (let t = 0; t < this.inlineQueue.length; t++) { const n = this.inlineQueue[t]; this.inlineTokens(n.src, n.tokens) } return this.inlineQueue = [], this.tokens
  } blockTokens(e, t = []) {
    this.options.pedantic ? e = e.replace(/\t/g, "    ").replace(/^ +$/gm, "") : e = e.replace(/^( *)(\t+)/gm, (o, l, u) => l + "    ".repeat(u.length)); let n, s, i, a; for (; e;)if (!(this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(o => (n = o.call({ lexer: this }, e, t)) ? (e = e.substring(n.raw.length), t.push(n), !0) : !1))) {
      if (n = this.tokenizer.space(e)) {
        e = e.substring(n.raw.length), n.raw.length === 1 && t.length > 0 ? t[t.length - 1].raw += `
`: t.push(n); continue
      } if (n = this.tokenizer.code(e)) {
        e = e.substring(n.raw.length), s = t[t.length - 1], s && (s.type === "paragraph" || s.type === "text") ? (s.raw += `
`+ n.raw, s.text += `
`+ n.text, this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : t.push(n); continue
      } if (n = this.tokenizer.fences(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.heading(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.hr(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.blockquote(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.list(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.html(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.def(e)) {
        e = e.substring(n.raw.length), s = t[t.length - 1], s && (s.type === "paragraph" || s.type === "text") ? (s.raw += `
`+ n.raw, s.text += `
`+ n.raw, this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : this.tokens.links[n.tag] || (this.tokens.links[n.tag] = { href: n.href, title: n.title }); continue
      } if (n = this.tokenizer.table(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.lheading(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (i = e, this.options.extensions && this.options.extensions.startBlock) { let o = 1 / 0; const l = e.slice(1); let u; this.options.extensions.startBlock.forEach(f => { u = f.call({ lexer: this }, l), typeof u == "number" && u >= 0 && (o = Math.min(o, u)) }), o < 1 / 0 && o >= 0 && (i = e.substring(0, o + 1)) } if (this.state.top && (n = this.tokenizer.paragraph(i))) {
        s = t[t.length - 1], a && s.type === "paragraph" ? (s.raw += `
`+ n.raw, s.text += `
`+ n.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : t.push(n), a = i.length !== e.length, e = e.substring(n.raw.length); continue
      } if (n = this.tokenizer.text(e)) {
        e = e.substring(n.raw.length), s = t[t.length - 1], s && s.type === "text" ? (s.raw += `
`+ n.raw, s.text += `
`+ n.text, this.inlineQueue.pop(), this.inlineQueue[this.inlineQueue.length - 1].src = s.text) : t.push(n); continue
      } if (e) { const o = "Infinite loop on byte: " + e.charCodeAt(0); if (this.options.silent) { console.error(o); break } else throw new Error(o) }
    } return this.state.top = !0, t
  } inline(e, t = []) { return this.inlineQueue.push({ src: e, tokens: t }), t } inlineTokens(e, t = []) { let n, s, i, a = e, o, l, u; if (this.tokens.links) { const f = Object.keys(this.tokens.links); if (f.length > 0) for (; (o = this.tokenizer.rules.inline.reflinkSearch.exec(a)) != null;)f.includes(o[0].slice(o[0].lastIndexOf("[") + 1, -1)) && (a = a.slice(0, o.index) + "[" + "a".repeat(o[0].length - 2) + "]" + a.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex)) } for (; (o = this.tokenizer.rules.inline.blockSkip.exec(a)) != null;)a = a.slice(0, o.index) + "[" + "a".repeat(o[0].length - 2) + "]" + a.slice(this.tokenizer.rules.inline.blockSkip.lastIndex); for (; (o = this.tokenizer.rules.inline.anyPunctuation.exec(a)) != null;)a = a.slice(0, o.index) + "++" + a.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex); for (; e;)if (l || (u = ""), l = !1, !(this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(f => (n = f.call({ lexer: this }, e, t)) ? (e = e.substring(n.raw.length), t.push(n), !0) : !1))) { if (n = this.tokenizer.escape(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.tag(e)) { e = e.substring(n.raw.length), s = t[t.length - 1], s && n.type === "text" && s.type === "text" ? (s.raw += n.raw, s.text += n.text) : t.push(n); continue } if (n = this.tokenizer.link(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.reflink(e, this.tokens.links)) { e = e.substring(n.raw.length), s = t[t.length - 1], s && n.type === "text" && s.type === "text" ? (s.raw += n.raw, s.text += n.text) : t.push(n); continue } if (n = this.tokenizer.emStrong(e, a, u)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.codespan(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.br(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.del(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (n = this.tokenizer.autolink(e)) { e = e.substring(n.raw.length), t.push(n); continue } if (!this.state.inLink && (n = this.tokenizer.url(e))) { e = e.substring(n.raw.length), t.push(n); continue } if (i = e, this.options.extensions && this.options.extensions.startInline) { let f = 1 / 0; const c = e.slice(1); let h; this.options.extensions.startInline.forEach(d => { h = d.call({ lexer: this }, c), typeof h == "number" && h >= 0 && (f = Math.min(f, h)) }), f < 1 / 0 && f >= 0 && (i = e.substring(0, f + 1)) } if (n = this.tokenizer.inlineText(i)) { e = e.substring(n.raw.length), n.raw.slice(-1) !== "_" && (u = n.raw.slice(-1)), l = !0, s = t[t.length - 1], s && s.type === "text" ? (s.raw += n.raw, s.text += n.text) : t.push(n); continue } if (e) { const f = "Infinite loop on byte: " + e.charCodeAt(0); if (this.options.silent) { console.error(f); break } else throw new Error(f) } } return t }
} class gt {
  constructor(e) { P(this, "options"); this.options = e || me } code(e, t, n) {
    var i; const s = (i = (t || "").match(/^\S*/)) == null ? void 0 : i[0]; return e = e.replace(/\n$/, "") + `
`, s ? '<pre><code class="language-' + J(s) + '">' + (n ? e : J(e, !0)) + `</code></pre>
`: "<pre><code>" + (n ? e : J(e, !0)) + `</code></pre>
`} blockquote(e) {
    return `<blockquote>
${e}</blockquote>
`} html(e, t) { return e } heading(e, t, n) {
    return `<h${t}>${e}</h${t}>
`} hr() {
    return `<hr>
`} list(e, t, n) {
    const s = t ? "ol" : "ul", i = t && n !== 1 ? ' start="' + n + '"' : ""; return "<" + s + i + `>
`+ e + "</" + s + `>
`} listitem(e, t, n) {
    return `<li>${e}</li>
`} checkbox(e) { return "<input " + (e ? 'checked="" ' : "") + 'disabled="" type="checkbox">' } paragraph(e) {
    return `<p>${e}</p>
`} table(e, t) {
    return t && (t = `<tbody>${t}</tbody>`), `<table>
<thead>
`+ e + `</thead>
`+ t + `</table>
`} tablerow(e) {
    return `<tr>
${e}</tr>
`} tablecell(e, t) {
    const n = t.header ? "th" : "td"; return (t.align ? `<${n} align="${t.align}">` : `<${n}>`) + e + `</${n}>
`} strong(e) { return `<strong>${e}</strong>` } em(e) { return `<em>${e}</em>` } codespan(e) { return `<code>${e}</code>` } br() { return "<br>" } del(e) { return `<del>${e}</del>` } link(e, t, n) { const s = Kn(e); if (s === null) return n; e = s; let i = '<a href="' + e + '"'; return t && (i += ' title="' + t + '"'), i += ">" + n + "</a>", i } image(e, t, n) { const s = Kn(e); if (s === null) return n; e = s; let i = `<img src="${e}" alt="${n}"`; return t && (i += ` title="${t}"`), i += ">", i } text(e) { return e }
} class Rn { strong(e) { return e } em(e) { return e } codespan(e) { return e } del(e) { return e } html(e) { return e } text(e) { return e } link(e, t, n) { return "" + n } image(e, t, n) { return "" + n } br() { return "" } } class re {
  constructor(e) { P(this, "options"); P(this, "renderer"); P(this, "textRenderer"); this.options = e || me, this.options.renderer = this.options.renderer || new gt, this.renderer = this.options.renderer, this.renderer.options = this.options, this.textRenderer = new Rn } static parse(e, t) { return new re(t).parse(e) } static parseInline(e, t) { return new re(t).parseInline(e) } parse(e, t = !0) {
    let n = ""; for (let s = 0; s < e.length; s++) {
      const i = e[s]; if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[i.type]) { const a = i, o = this.options.extensions.renderers[a.type].call({ parser: this }, a); if (o !== !1 || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(a.type)) { n += o || ""; continue } } switch (i.type) {
        case "space": continue; case "hr": { n += this.renderer.hr(); continue } case "heading": { const a = i; n += this.renderer.heading(this.parseInline(a.tokens), a.depth, Pi(this.parseInline(a.tokens, this.textRenderer))); continue } case "code": { const a = i; n += this.renderer.code(a.text, a.lang, !!a.escaped); continue } case "table": { const a = i; let o = "", l = ""; for (let f = 0; f < a.header.length; f++)l += this.renderer.tablecell(this.parseInline(a.header[f].tokens), { header: !0, align: a.align[f] }); o += this.renderer.tablerow(l); let u = ""; for (let f = 0; f < a.rows.length; f++) { const c = a.rows[f]; l = ""; for (let h = 0; h < c.length; h++)l += this.renderer.tablecell(this.parseInline(c[h].tokens), { header: !1, align: a.align[h] }); u += this.renderer.tablerow(l) } n += this.renderer.table(o, u); continue } case "blockquote": { const a = i, o = this.parse(a.tokens); n += this.renderer.blockquote(o); continue } case "list": { const a = i, o = a.ordered, l = a.start, u = a.loose; let f = ""; for (let c = 0; c < a.items.length; c++) { const h = a.items[c], d = h.checked, w = h.task; let m = ""; if (h.task) { const g = this.renderer.checkbox(!!d); u ? h.tokens.length > 0 && h.tokens[0].type === "paragraph" ? (h.tokens[0].text = g + " " + h.tokens[0].text, h.tokens[0].tokens && h.tokens[0].tokens.length > 0 && h.tokens[0].tokens[0].type === "text" && (h.tokens[0].tokens[0].text = g + " " + h.tokens[0].tokens[0].text)) : h.tokens.unshift({ type: "text", text: g + " " }) : m += g + " " } m += this.parse(h.tokens, u), f += this.renderer.listitem(m, w, !!d) } n += this.renderer.list(f, o, l); continue } case "html": { const a = i; n += this.renderer.html(a.text, a.block); continue } case "paragraph": { const a = i; n += this.renderer.paragraph(this.parseInline(a.tokens)); continue } case "text": {
          let a = i, o = a.tokens ? this.parseInline(a.tokens) : a.text; for (; s + 1 < e.length && e[s + 1].type === "text";)a = e[++s], o += `
`+ (a.tokens ? this.parseInline(a.tokens) : a.text); n += t ? this.renderer.paragraph(o) : o; continue
        } default: { const a = 'Token with "' + i.type + '" type was not found.'; if (this.options.silent) return console.error(a), ""; throw new Error(a) }
      }
    } return n
  } parseInline(e, t) { t = t || this.renderer; let n = ""; for (let s = 0; s < e.length; s++) { const i = e[s]; if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[i.type]) { const a = this.options.extensions.renderers[i.type].call({ parser: this }, i); if (a !== !1 || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(i.type)) { n += a || ""; continue } } switch (i.type) { case "escape": { const a = i; n += t.text(a.text); break } case "html": { const a = i; n += t.html(a.text); break } case "link": { const a = i; n += t.link(a.href, a.title, this.parseInline(a.tokens, t)); break } case "image": { const a = i; n += t.image(a.href, a.title, a.text); break } case "strong": { const a = i; n += t.strong(this.parseInline(a.tokens, t)); break } case "em": { const a = i; n += t.em(this.parseInline(a.tokens, t)); break } case "codespan": { const a = i; n += t.codespan(a.text); break } case "br": { n += t.br(); break } case "del": { const a = i; n += t.del(this.parseInline(a.tokens, t)); break } case "text": { const a = i; n += t.text(a.text); break } default: { const a = 'Token with "' + i.type + '" type was not found.'; if (this.options.silent) return console.error(a), ""; throw new Error(a) } } } return n }
} class De { constructor(e) { P(this, "options"); this.options = e || me } preprocess(e) { return e } postprocess(e) { return e } processAllTokens(e) { return e } } P(De, "passThroughHooks", new Set(["preprocess", "postprocess", "processAllTokens"])); var de, Xt, kr; class aa { constructor(...e) { $n(this, de); P(this, "defaults", bn()); P(this, "options", this.setOptions); P(this, "parse", Qe(this, de, Xt).call(this, se.lex, re.parse)); P(this, "parseInline", Qe(this, de, Xt).call(this, se.lexInline, re.parseInline)); P(this, "Parser", re); P(this, "Renderer", gt); P(this, "TextRenderer", Rn); P(this, "Lexer", se); P(this, "Tokenizer", mt); P(this, "Hooks", De); this.use(...e) } walkTokens(e, t) { var s, i; let n = []; for (const a of e) switch (n = n.concat(t.call(this, a)), a.type) { case "table": { const o = a; for (const l of o.header) n = n.concat(this.walkTokens(l.tokens, t)); for (const l of o.rows) for (const u of l) n = n.concat(this.walkTokens(u.tokens, t)); break } case "list": { const o = a; n = n.concat(this.walkTokens(o.items, t)); break } default: { const o = a; (i = (s = this.defaults.extensions) == null ? void 0 : s.childTokens) != null && i[o.type] ? this.defaults.extensions.childTokens[o.type].forEach(l => { const u = o[l].flat(1 / 0); n = n.concat(this.walkTokens(u, t)) }) : o.tokens && (n = n.concat(this.walkTokens(o.tokens, t))) } }return n } use(...e) { const t = this.defaults.extensions || { renderers: {}, childTokens: {} }; return e.forEach(n => { const s = { ...n }; if (s.async = this.defaults.async || s.async || !1, n.extensions && (n.extensions.forEach(i => { if (!i.name) throw new Error("extension name required"); if ("renderer" in i) { const a = t.renderers[i.name]; a ? t.renderers[i.name] = function (...o) { let l = i.renderer.apply(this, o); return l === !1 && (l = a.apply(this, o)), l } : t.renderers[i.name] = i.renderer } if ("tokenizer" in i) { if (!i.level || i.level !== "block" && i.level !== "inline") throw new Error("extension level must be 'block' or 'inline'"); const a = t[i.level]; a ? a.unshift(i.tokenizer) : t[i.level] = [i.tokenizer], i.start && (i.level === "block" ? t.startBlock ? t.startBlock.push(i.start) : t.startBlock = [i.start] : i.level === "inline" && (t.startInline ? t.startInline.push(i.start) : t.startInline = [i.start])) } "childTokens" in i && i.childTokens && (t.childTokens[i.name] = i.childTokens) }), s.extensions = t), n.renderer) { const i = this.defaults.renderer || new gt(this.defaults); for (const a in n.renderer) { if (!(a in i)) throw new Error(`renderer '${a}' does not exist`); if (a === "options") continue; const o = a, l = n.renderer[o], u = i[o]; i[o] = (...f) => { let c = l.apply(i, f); return c === !1 && (c = u.apply(i, f)), c || "" } } s.renderer = i } if (n.tokenizer) { const i = this.defaults.tokenizer || new mt(this.defaults); for (const a in n.tokenizer) { if (!(a in i)) throw new Error(`tokenizer '${a}' does not exist`); if (["options", "rules", "lexer"].includes(a)) continue; const o = a, l = n.tokenizer[o], u = i[o]; i[o] = (...f) => { let c = l.apply(i, f); return c === !1 && (c = u.apply(i, f)), c } } s.tokenizer = i } if (n.hooks) { const i = this.defaults.hooks || new De; for (const a in n.hooks) { if (!(a in i)) throw new Error(`hook '${a}' does not exist`); if (a === "options") continue; const o = a, l = n.hooks[o], u = i[o]; De.passThroughHooks.has(a) ? i[o] = f => { if (this.defaults.async) return Promise.resolve(l.call(i, f)).then(h => u.call(i, h)); const c = l.call(i, f); return u.call(i, c) } : i[o] = (...f) => { let c = l.apply(i, f); return c === !1 && (c = u.apply(i, f)), c } } s.hooks = i } if (n.walkTokens) { const i = this.defaults.walkTokens, a = n.walkTokens; s.walkTokens = function (o) { let l = []; return l.push(a.call(this, o)), i && (l = l.concat(i.call(this, o))), l } } this.defaults = { ...this.defaults, ...s } }), this } setOptions(e) { return this.defaults = { ...this.defaults, ...e }, this } lexer(e, t) { return se.lex(e, t ?? this.defaults) } parser(e, t) { return re.parse(e, t ?? this.defaults) } } de = new WeakSet, Xt = function (e, t) { return (n, s) => { const i = { ...s }, a = { ...this.defaults, ...i }; this.defaults.async === !0 && i.async === !1 && (a.silent || console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored."), a.async = !0); const o = Qe(this, de, kr).call(this, !!a.silent, !!a.async); if (typeof n > "u" || n === null) return o(new Error("marked(): input parameter is undefined or null")); if (typeof n != "string") return o(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(n) + ", string expected")); if (a.hooks && (a.hooks.options = a), a.async) return Promise.resolve(a.hooks ? a.hooks.preprocess(n) : n).then(l => e(l, a)).then(l => a.hooks ? a.hooks.processAllTokens(l) : l).then(l => a.walkTokens ? Promise.all(this.walkTokens(l, a.walkTokens)).then(() => l) : l).then(l => t(l, a)).then(l => a.hooks ? a.hooks.postprocess(l) : l).catch(o); try { a.hooks && (n = a.hooks.preprocess(n)); let l = e(n, a); a.hooks && (l = a.hooks.processAllTokens(l)), a.walkTokens && this.walkTokens(l, a.walkTokens); let u = t(l, a); return a.hooks && (u = a.hooks.postprocess(u)), u } catch (l) { return o(l) } } }, kr = function (e, t) {
  return n => {
    if (n.message += `
Please report this to https://github.com/markedjs/marked.`, e) { const s = "<p>An error occurred:</p><pre>" + J(n.message + "", !0) + "</pre>"; return t ? Promise.resolve(s) : s } if (t) return Promise.reject(n); throw n
  }
}; const fe = new aa; function R(r, e) { return fe.parse(r, e) } R.options = R.setOptions = function (r) { return fe.setOptions(r), R.defaults = fe.defaults, hr(R.defaults), R }; R.getDefaults = bn; R.defaults = me; R.use = function (...r) { return fe.use(...r), R.defaults = fe.defaults, hr(R.defaults), R }; R.walkTokens = function (r, e) { return fe.walkTokens(r, e) }; R.parseInline = fe.parseInline; R.Parser = re; R.parser = re.parse; R.Renderer = gt; R.TextRenderer = Rn; R.Lexer = se; R.lexer = se.lex; R.Tokenizer = mt; R.Hooks = De; R.parse = R; R.options; R.setOptions; R.use; R.walkTokens; R.parseInline; re.parse; se.lex; const oa = JSON.parse(`[{"email":"12threaltor@gmail.com","full_name":"Heather Fancher","title":"Realtor","location":"Dupont, Washington, United States of America","linkedin":"https://linkedin.com/in/heather-fancher-realtor","company":"Weichert, Realtors - Professionals","company_domain":"weichert.com","company_industry":"Real Estate","company_size_range":"11 to 50","company_description":"Browse active real estate listings for apartments to rent or houses for sale. Or if youâ€™re looking to rent or sell your home, we can help..."},{"email":"rich.campbell@sonoma.edu","full_name":"Rich Campbell, Ph.D.","title":"Professor of Marketing","location":"San Francisco, California, United States of America","linkedin":"https://linkedin.com/in/richcampbellphd","company":"Sonoma State University","company_domain":"sonoma.edu","company_industry":"Higher Education","company_size_range":"501 to 1000","company_description":"Sonoma State University is a public institution in the California northern bay area that was founded in 1961. It enrolls 9,300 students, ..."},{"email":"kmcculloch@linkedin.com","full_name":"Kurt M.","title":"Senior Manager, User Experience Research","location":"San Francisco, California, United States of America","linkedin":"https://linkedin.com/in/kurtmc","company":"LinkedIn","company_industry":"Software Development","company_size_range":"10001+","company_description":"Macro Capital Advisors | 3 followers on LinkedIn. &quot;Your Capital, Our Expertise&quot; | VC Pitches: venture@macrocapitaladvisors.com New Deals (M&amp;A, Private Credit, etc.): deals@macrocapitaladvisors.com"},{"email":"lurae@llnyc.agency","full_name":"LuRae Lumpkin Inc.","title":"Chief Executive Officer","location":"United States of America","linkedin":"https://linkedin.com/in/luraelumpkin","company":"LLNYC.Agency Worldwide","company_domain":"llnyc.agency","company_industry":"Marketing and Advertising","company_size_range":"11 to 50","company_description":"Global Advertising & Marketing Agency specializing in Digital Advertising, Branding, Social Media Marketing, SEO, Influencer Marketing, I..."},{"email":"steve.mcnear@thetalake.com","full_name":"Steve McNear","title":"Business Development Manager","location":"Oregon, Oregon Metropolitan Area, United States of America","linkedin":"https://linkedin.com/in/stevemcnear","company":"Theta Lake","company_domain":"thetalake.com","company_industry":"Software Development","company_size_range":"51 to 200","company_description":"Theta Lake enables secure and compliant unified communications and collaboration with advanced capture, archiving, and supervision."},{"email":"chris.piper@technicolor.com","full_name":"Chris Piper","title":"Dailies Colorist","location":"Los Angeles, California, United States of America","linkedin":"https://linkedin.com/in/chpiper","company":"Technicolor Group","company_domain":"technicolor.com","company_industry":"Entertainment Providers","company_size_range":"10001+","company_description":"Beyond Imagination"},{"email":"drew.kincaid@maxar.com","full_name":"Drew Kincaid","title":"Manager, Deal Desk","location":"Denver, Denver Metropolitan Area, United States of America","linkedin":"https://linkedin.com/in/drewkincaid","company":"Maxar","company_domain":"maxar.com","company_industry":"Defense and Space Manufacturing","company_size_range":"1001 to 5000","company_description":"Integrated space infrastructure and Earth intelligence capabilities that make global change visible, information actionable and space acc..."},{"email":"dferrero@lbl.gov","full_name":"Dolores Ferrero","title":"Process Improvement Manager","location":"San Ramon, California, United States of America","linkedin":"https://linkedin.com/in/doloresferrero","company":"Berkeley Lab","company_domain":"lbl.gov","company_industry":"Research Services","company_size_range":"1001 to 5000","company_description":"Lawrence Berkeley National Laboratory is advancing the scope of human knowledge & seeking science solutions to the greatest problems faci..."},{"email":"will.vaughn@carbonlighthouse.com","full_name":"Will Vaughn","title":"Lead Software Engineer","location":"San Francisco Bay, San Francisco Bay Area, United States of America","linkedin":"https://linkedin.com/in/vaughnwill","company":"Carbon Lighthouse","company_domain":"carbonlighthouse.com","company_industry":"Technology, Information and Internet","company_size_range":"11 to 50","company_description":"Carbon Lighthouse turns Building Energy Efficiency into guaranteed revenue. Learn about Carbon Lighthouse - Home"},{"email":"steven@asbury.net","full_name":"Steven Asbury","title":"President","location":"Eugene, Oregon, United States of America","linkedin":"https://linkedin.com/in/asbury","company":"Asbury & Co.","company_domain":"asbury.net","company_industry":"Advertising Services","company_size_range":"2 to 10","company_description":"Asbury & Co. Advertising + Design is an award-winning, full-service advertising and digital agency based in Eugene, Oregon. Our team incl..."},{"email":"hgriffith@squareup.com","full_name":"Heidi Griffith","title":"DesignOps Lead","location":"Portland, Oregon, United States of America","linkedin":"https://linkedin.com/in/heidigriffith","company":"Square","company_domain":"squareup.com","company_industry":"Software Development","company_size_range":"1001 to 5000"},{"email":"kelsey.towbis@apparent.com.au","full_name":"Kelsey Towbis","title":"Account Director","location":"Sydney, Greater Sydney, Australia","linkedin":"https://linkedin.com/in/kelsey-towbis-0b737822","company":"Apparent","company_domain":"apparent.com.au","company_industry":"Advertising Services","company_size_range":"51 to 200","company_description":"Independent & entrepreneurial. Our services stretch across strategy, brand & creative, digital, social plus media planning & buying."},{"email":"greg.wells@tiger21.com","full_name":"Greg Wells","title":"Chief Operating Officer","location":"Santa Barbara, California, United States of America","linkedin":"https://linkedin.com/in/gregfwells","company":"TIGER 21","company_domain":"tiger21.com","company_industry":"Professional Training and Coaching","company_size_range":"51 to 200","company_description":"TIGER 21 is the premier peer network helping ultra-high-net-worth individuals and family offices navigate the challenges and opportunitie..."},{"email":"mmahanay@ctl.net","full_name":"Mike Mahanay","title":"Vice President of Business Development & Government Affairs","location":"Oregon, Oregon Metropolitan Area, United States of America","linkedin":"https://linkedin.com/in/mahanay","company":"CTL","company_domain":"ctl.net","company_industry":"Computer Hardware Manufacturing","company_size_range":"51 to 200","company_description":"CTL is a global computing solutions manufacturer offering Chromebooks, Chromeboxes, and Google Meet solutions for education and enterpris..."},{"email":"matt@oneriverschool.com","full_name":"Matt Ross","title":"Founder","location":"Cresskill, New Jersey, United States of America","linkedin":"https://linkedin.com/in/matt-ross-oneriver","company":"One River School of Art + Design","company_domain":"oneriverschool.com","company_industry":"Education Administration Programs","company_size_range":"51 to 200","company_description":"Founded in 2012, One River School has developed a unique method for teaching studio art and digital design classes."},{"email":"paul@codi.com","full_name":"Paul Thompson","title":"Head of Product","location":"San Francisco, California, United States of America","linkedin":"https://linkedin.com/in/pauljonathanthompson","company":"Codi","company_domain":"codi.com","company_industry":"Real Estate","company_size_range":"11 to 50"},{"email":"ben.hester@gusto.com","full_name":"Ben Hester","title":"Senior Product Design Manager","location":"Oakland, California, United States of America","linkedin":"https://linkedin.com/in/benhester","company":"Gusto","company_domain":"gusto.com","company_industry":"Software Development","company_size_range":"1001 to 5000","company_description":"Gustoâ€™s people platform helps businesses like yours onboard, pay, insure, and support your hardworking team. Payroll, benefits, and more."},{"email":"ross@representations.com","full_name":"Ross Rankin","title":"President","location":"Santa Ynez, California, United States of America","linkedin":"https://linkedin.com/in/ross-rankin-a0bb69a","company":"Representations, llc","company_domain":"representations.com","company_industry":"Hospital & health care","company_size_range":"1 to 10"},{"email":"keith.stephens@druva.com","full_name":"Keith Stephens","title":"Virtual Events Specialist","location":"Eugene, Oregon, United States of America","linkedin":"https://linkedin.com/in/keithstephens1","company":"Druva","company_domain":"druva.com","company_industry":"Software Development","company_size_range":"1001 to 5000","company_description":"Druva's SaaS platform is a fresh take on data security backed by a $10M guarantee. Protect your data wherever it lives with our cloud-bas..."},{"email":"william@budbreak.io","full_name":"William Wagner","title":"Founder | Web Developer","location":"San Francisco Bay, San Francisco Bay Area, United States of America","linkedin":"https://linkedin.com/in/wagonmonster","company":"Bud Break Interactive","company_domain":"budbreak.io","company_industry":"Technology, Information and Internet","company_size_range":"1"},{"email":"colinsweeney20@gmail.com","title":"csweeney@ibm.com","location":"business","linkedin":"Sweeney"}]`); let xr = JSON.stringify(oa); console.log(xr); const la = new S({ baseURL: "https://openrouter.ai/api/v1", apiKey: "", dangerouslyAllowBrowser: !0 }); let Ot = [{ role: "system", content: "You are an AI that helps users connect with alumni. you will try your best to relate the users prompt to the dataset given (specifficlly their title). You will provide information relevant to the user's prompt (including email, LinkedIn URL, locations, company, etc). Format your responses as readable text without JSON brackets. If you don't have some information, leave it blank. ONLY RESPOND WITH THE DATA PROVIDED! please give advice on what to prompt when you cant find matchs" }, {
  role: "system", content: `Here is a JSON dataset of alumni information for reference:
    
Context:
    
    ${xr}`
}]; async function ca(r) { Ot.push({ role: "user", content: r }); try { const t = (await la.chat.completions.create({ model: "openai/gpt-4o-mini", messages: Ot, temperature: .7 })).choices[0].message.content; return Ot.push({ role: "assistant", content: t }), t } catch (e) { throw console.error("Error making API call:", e), e } } document.querySelector("#app").innerHTML = `
  <div class="container">
    <header class="header">
      <div class="logo">
        <img src="https://i.imgur.com/CipeLd6.png" alt="Alumo Logo" class="logo-image" />
        <span class="logo-text">Alumo</span>
      </div>
      <div class="nav-buttons">
        <a href="https://tryalumo.circle.so/c/template-library/" target="_blank" class="nav-button">Templates</a>
        <a href="https://tryalumo.circle.so/c/find-a-mentor/" target="_blank" class="nav-button">Mentorship</a>
        <a href="https://tryalumo.circle.so/c/upcoming-events/?sort=asc" target="_blank" class="nav-button">Events</a>
      </div>
    </header>
    <div class="welcome-message">
      <h1>Welcome to Alumo ðŸ‘‹</h1>
      <p>Real people, real opportunitiesâ€”welcome to the network that works for you.</p>
    </div>
    <div class="input-container">
      <input type="text" id="userInput" placeholder="Search for alumni by industry, location, or role..." />
      <button id="sendButton">Search</button>
    </div>
    <div id="output" class="message hidden"></div>
  </div>
`; const Vt = document.querySelector("#userInput"), ua = document.querySelector("#sendButton"), st = document.querySelector("#output"); async function Sr() { const r = Vt.value.trim(); if (r) { try { st.classList.remove("hidden"), st.textContent = "Searching..."; const e = await ca(r); console.log("API Response:", e), st.innerHTML = R(e) } catch (e) { console.error("Error in handleSubmit:", e), st.textContent = `Error: ${e.message}` } Vt.value = "" } } ua.addEventListener("click", Sr); Vt.addEventListener("keypress", r => { r.key === "Enter" && Sr() });
